
lab3.2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f88  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003094  08003094  00013094  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800315c  0800315c  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  0800315c  0800315c  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800315c  0800315c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800315c  0800315c  0001315c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003160  08003160  00013160  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08003164  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000120  20000078  080031dc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000198  080031dc  00020198  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a6af  00000000  00000000  000200a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001820  00000000  00000000  0002a750  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b80  00000000  00000000  0002bf70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ab8  00000000  00000000  0002caf0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001791d  00000000  00000000  0002d5a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000095cd  00000000  00000000  00044ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0008a561  00000000  00000000  0004e492  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d89f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003330  00000000  00000000  000d8a70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000078 	.word	0x20000078
 8000128:	00000000 	.word	0x00000000
 800012c:	0800307c 	.word	0x0800307c

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000007c 	.word	0x2000007c
 8000148:	0800307c 	.word	0x0800307c

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000150:	f000 fe7c 	bl	8000e4c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000154:	f000 f80c 	bl	8000170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000158:	f000 f8c4 	bl	80002e4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800015c:	f000 f898 	bl	8000290 <MX_USART2_UART_Init>
  MX_TIM3_Init();
 8000160:	f000 f848 	bl	80001f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000164:	4801      	ldr	r0, [pc, #4]	; (800016c <main+0x20>)
 8000166:	f001 fdef 	bl	8001d48 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800016a:	e7fe      	b.n	800016a <main+0x1e>
 800016c:	200000d4 	.word	0x200000d4

08000170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	b090      	sub	sp, #64	; 0x40
 8000174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000176:	f107 0318 	add.w	r3, r7, #24
 800017a:	2228      	movs	r2, #40	; 0x28
 800017c:	2100      	movs	r1, #0
 800017e:	4618      	mov	r0, r3
 8000180:	f002 fb62 	bl	8002848 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000184:	1d3b      	adds	r3, r7, #4
 8000186:	2200      	movs	r2, #0
 8000188:	601a      	str	r2, [r3, #0]
 800018a:	605a      	str	r2, [r3, #4]
 800018c:	609a      	str	r2, [r3, #8]
 800018e:	60da      	str	r2, [r3, #12]
 8000190:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000192:	2302      	movs	r3, #2
 8000194:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000196:	2301      	movs	r3, #1
 8000198:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800019a:	2310      	movs	r3, #16
 800019c:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800019e:	2302      	movs	r3, #2
 80001a0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80001a2:	2300      	movs	r3, #0
 80001a4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80001a6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80001aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80001ac:	f107 0318 	add.w	r3, r7, #24
 80001b0:	4618      	mov	r0, r3
 80001b2:	f001 f95d 	bl	8001470 <HAL_RCC_OscConfig>
 80001b6:	4603      	mov	r3, r0
 80001b8:	2b00      	cmp	r3, #0
 80001ba:	d001      	beq.n	80001c0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80001bc:	f000 fd14 	bl	8000be8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80001c0:	230f      	movs	r3, #15
 80001c2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80001c4:	2302      	movs	r3, #2
 80001c6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80001c8:	2300      	movs	r3, #0
 80001ca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80001cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80001d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80001d2:	2300      	movs	r3, #0
 80001d4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80001d6:	1d3b      	adds	r3, r7, #4
 80001d8:	2102      	movs	r1, #2
 80001da:	4618      	mov	r0, r3
 80001dc:	f001 fbc8 	bl	8001970 <HAL_RCC_ClockConfig>
 80001e0:	4603      	mov	r3, r0
 80001e2:	2b00      	cmp	r3, #0
 80001e4:	d001      	beq.n	80001ea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80001e6:	f000 fcff 	bl	8000be8 <Error_Handler>
  }
}
 80001ea:	bf00      	nop
 80001ec:	3740      	adds	r7, #64	; 0x40
 80001ee:	46bd      	mov	sp, r7
 80001f0:	bd80      	pop	{r7, pc}
	...

080001f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b086      	sub	sp, #24
 80001f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80001fa:	f107 0308 	add.w	r3, r7, #8
 80001fe:	2200      	movs	r2, #0
 8000200:	601a      	str	r2, [r3, #0]
 8000202:	605a      	str	r2, [r3, #4]
 8000204:	609a      	str	r2, [r3, #8]
 8000206:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000208:	463b      	mov	r3, r7
 800020a:	2200      	movs	r2, #0
 800020c:	601a      	str	r2, [r3, #0]
 800020e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000210:	4b1d      	ldr	r3, [pc, #116]	; (8000288 <MX_TIM3_Init+0x94>)
 8000212:	4a1e      	ldr	r2, [pc, #120]	; (800028c <MX_TIM3_Init+0x98>)
 8000214:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 64000-1;
 8000216:	4b1c      	ldr	r3, [pc, #112]	; (8000288 <MX_TIM3_Init+0x94>)
 8000218:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 800021c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800021e:	4b1a      	ldr	r3, [pc, #104]	; (8000288 <MX_TIM3_Init+0x94>)
 8000220:	2200      	movs	r2, #0
 8000222:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10-1;
 8000224:	4b18      	ldr	r3, [pc, #96]	; (8000288 <MX_TIM3_Init+0x94>)
 8000226:	2209      	movs	r2, #9
 8000228:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800022a:	4b17      	ldr	r3, [pc, #92]	; (8000288 <MX_TIM3_Init+0x94>)
 800022c:	2200      	movs	r2, #0
 800022e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000230:	4b15      	ldr	r3, [pc, #84]	; (8000288 <MX_TIM3_Init+0x94>)
 8000232:	2200      	movs	r2, #0
 8000234:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000236:	4814      	ldr	r0, [pc, #80]	; (8000288 <MX_TIM3_Init+0x94>)
 8000238:	f001 fd36 	bl	8001ca8 <HAL_TIM_Base_Init>
 800023c:	4603      	mov	r3, r0
 800023e:	2b00      	cmp	r3, #0
 8000240:	d001      	beq.n	8000246 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000242:	f000 fcd1 	bl	8000be8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000246:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800024a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800024c:	f107 0308 	add.w	r3, r7, #8
 8000250:	4619      	mov	r1, r3
 8000252:	480d      	ldr	r0, [pc, #52]	; (8000288 <MX_TIM3_Init+0x94>)
 8000254:	f001 fed2 	bl	8001ffc <HAL_TIM_ConfigClockSource>
 8000258:	4603      	mov	r3, r0
 800025a:	2b00      	cmp	r3, #0
 800025c:	d001      	beq.n	8000262 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800025e:	f000 fcc3 	bl	8000be8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000262:	2300      	movs	r3, #0
 8000264:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000266:	2300      	movs	r3, #0
 8000268:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800026a:	463b      	mov	r3, r7
 800026c:	4619      	mov	r1, r3
 800026e:	4806      	ldr	r0, [pc, #24]	; (8000288 <MX_TIM3_Init+0x94>)
 8000270:	f002 f898 	bl	80023a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000274:	4603      	mov	r3, r0
 8000276:	2b00      	cmp	r3, #0
 8000278:	d001      	beq.n	800027e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 800027a:	f000 fcb5 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800027e:	bf00      	nop
 8000280:	3718      	adds	r7, #24
 8000282:	46bd      	mov	sp, r7
 8000284:	bd80      	pop	{r7, pc}
 8000286:	bf00      	nop
 8000288:	200000d4 	.word	0x200000d4
 800028c:	40000400 	.word	0x40000400

08000290 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000294:	4b11      	ldr	r3, [pc, #68]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 8000296:	4a12      	ldr	r2, [pc, #72]	; (80002e0 <MX_USART2_UART_Init+0x50>)
 8000298:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800029a:	4b10      	ldr	r3, [pc, #64]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 800029c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80002a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002a2:	4b0e      	ldr	r3, [pc, #56]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002a4:	2200      	movs	r2, #0
 80002a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002a8:	4b0c      	ldr	r3, [pc, #48]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002ae:	4b0b      	ldr	r3, [pc, #44]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80002b4:	4b09      	ldr	r3, [pc, #36]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002b6:	220c      	movs	r2, #12
 80002b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80002ba:	4b08      	ldr	r3, [pc, #32]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002bc:	2200      	movs	r2, #0
 80002be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80002c0:	4b06      	ldr	r3, [pc, #24]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002c2:	2200      	movs	r2, #0
 80002c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80002c6:	4805      	ldr	r0, [pc, #20]	; (80002dc <MX_USART2_UART_Init+0x4c>)
 80002c8:	f002 f8dc 	bl	8002484 <HAL_UART_Init>
 80002cc:	4603      	mov	r3, r0
 80002ce:	2b00      	cmp	r3, #0
 80002d0:	d001      	beq.n	80002d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80002d2:	f000 fc89 	bl	8000be8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80002d6:	bf00      	nop
 80002d8:	bd80      	pop	{r7, pc}
 80002da:	bf00      	nop
 80002dc:	20000150 	.word	0x20000150
 80002e0:	40004400 	.word	0x40004400

080002e4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80002e4:	b580      	push	{r7, lr}
 80002e6:	b088      	sub	sp, #32
 80002e8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80002ea:	f107 0310 	add.w	r3, r7, #16
 80002ee:	2200      	movs	r2, #0
 80002f0:	601a      	str	r2, [r3, #0]
 80002f2:	605a      	str	r2, [r3, #4]
 80002f4:	609a      	str	r2, [r3, #8]
 80002f6:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80002f8:	4b30      	ldr	r3, [pc, #192]	; (80003bc <MX_GPIO_Init+0xd8>)
 80002fa:	699b      	ldr	r3, [r3, #24]
 80002fc:	4a2f      	ldr	r2, [pc, #188]	; (80003bc <MX_GPIO_Init+0xd8>)
 80002fe:	f043 0310 	orr.w	r3, r3, #16
 8000302:	6193      	str	r3, [r2, #24]
 8000304:	4b2d      	ldr	r3, [pc, #180]	; (80003bc <MX_GPIO_Init+0xd8>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	f003 0310 	and.w	r3, r3, #16
 800030c:	60fb      	str	r3, [r7, #12]
 800030e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000310:	4b2a      	ldr	r3, [pc, #168]	; (80003bc <MX_GPIO_Init+0xd8>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	4a29      	ldr	r2, [pc, #164]	; (80003bc <MX_GPIO_Init+0xd8>)
 8000316:	f043 0320 	orr.w	r3, r3, #32
 800031a:	6193      	str	r3, [r2, #24]
 800031c:	4b27      	ldr	r3, [pc, #156]	; (80003bc <MX_GPIO_Init+0xd8>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	f003 0320 	and.w	r3, r3, #32
 8000324:	60bb      	str	r3, [r7, #8]
 8000326:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000328:	4b24      	ldr	r3, [pc, #144]	; (80003bc <MX_GPIO_Init+0xd8>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	4a23      	ldr	r2, [pc, #140]	; (80003bc <MX_GPIO_Init+0xd8>)
 800032e:	f043 0304 	orr.w	r3, r3, #4
 8000332:	6193      	str	r3, [r2, #24]
 8000334:	4b21      	ldr	r3, [pc, #132]	; (80003bc <MX_GPIO_Init+0xd8>)
 8000336:	699b      	ldr	r3, [r3, #24]
 8000338:	f003 0304 	and.w	r3, r3, #4
 800033c:	607b      	str	r3, [r7, #4]
 800033e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000340:	4b1e      	ldr	r3, [pc, #120]	; (80003bc <MX_GPIO_Init+0xd8>)
 8000342:	699b      	ldr	r3, [r3, #24]
 8000344:	4a1d      	ldr	r2, [pc, #116]	; (80003bc <MX_GPIO_Init+0xd8>)
 8000346:	f043 0308 	orr.w	r3, r3, #8
 800034a:	6193      	str	r3, [r2, #24]
 800034c:	4b1b      	ldr	r3, [pc, #108]	; (80003bc <MX_GPIO_Init+0xd8>)
 800034e:	699b      	ldr	r3, [r3, #24]
 8000350:	f003 0308 	and.w	r3, r3, #8
 8000354:	603b      	str	r3, [r7, #0]
 8000356:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000358:	2200      	movs	r2, #0
 800035a:	2120      	movs	r1, #32
 800035c:	4818      	ldr	r0, [pc, #96]	; (80003c0 <MX_GPIO_Init+0xdc>)
 800035e:	f001 f856 	bl	800140e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : button_Pin */
  GPIO_InitStruct.Pin = button_Pin;
 8000362:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000366:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000368:	2300      	movs	r3, #0
 800036a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800036c:	2300      	movs	r3, #0
 800036e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(button_GPIO_Port, &GPIO_InitStruct);
 8000370:	f107 0310 	add.w	r3, r7, #16
 8000374:	4619      	mov	r1, r3
 8000376:	4813      	ldr	r0, [pc, #76]	; (80003c4 <MX_GPIO_Init+0xe0>)
 8000378:	f000 fed8 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800037c:	2320      	movs	r3, #32
 800037e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000380:	2301      	movs	r3, #1
 8000382:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000384:	2300      	movs	r3, #0
 8000386:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000388:	2302      	movs	r3, #2
 800038a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800038c:	f107 0310 	add.w	r3, r7, #16
 8000390:	4619      	mov	r1, r3
 8000392:	480b      	ldr	r0, [pc, #44]	; (80003c0 <MX_GPIO_Init+0xdc>)
 8000394:	f000 feca 	bl	800112c <HAL_GPIO_Init>

  /*Configure GPIO pins : B2_Pin BT2_Pin */
  GPIO_InitStruct.Pin = B2_Pin|BT2_Pin;
 8000398:	f44f 6390 	mov.w	r3, #1152	; 0x480
 800039c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800039e:	2300      	movs	r3, #0
 80003a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003a2:	2300      	movs	r3, #0
 80003a4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80003a6:	f107 0310 	add.w	r3, r7, #16
 80003aa:	4619      	mov	r1, r3
 80003ac:	4804      	ldr	r0, [pc, #16]	; (80003c0 <MX_GPIO_Init+0xdc>)
 80003ae:	f000 febd 	bl	800112c <HAL_GPIO_Init>

}
 80003b2:	bf00      	nop
 80003b4:	3720      	adds	r7, #32
 80003b6:	46bd      	mov	sp, r7
 80003b8:	bd80      	pop	{r7, pc}
 80003ba:	bf00      	nop
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40010800 	.word	0x40010800
 80003c4:	40011000 	.word	0x40011000

080003c8 <Normal_clk>:

/* USER CODE BEGIN 4 */
void Normal_clk(void){
 80003c8:	b480      	push	{r7}
 80003ca:	af00      	add	r7, sp, #0

	msec++;
 80003cc:	4b1e      	ldr	r3, [pc, #120]	; (8000448 <Normal_clk+0x80>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	3301      	adds	r3, #1
 80003d2:	4a1d      	ldr	r2, [pc, #116]	; (8000448 <Normal_clk+0x80>)
 80003d4:	6013      	str	r3, [r2, #0]
		if(msec > 99){
 80003d6:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <Normal_clk+0x80>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	2b63      	cmp	r3, #99	; 0x63
 80003dc:	dd2f      	ble.n	800043e <Normal_clk+0x76>
			msec = 0;
 80003de:	4b1a      	ldr	r3, [pc, #104]	; (8000448 <Normal_clk+0x80>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	601a      	str	r2, [r3, #0]
			sec ++;
 80003e4:	4b19      	ldr	r3, [pc, #100]	; (800044c <Normal_clk+0x84>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	3301      	adds	r3, #1
 80003ea:	4a18      	ldr	r2, [pc, #96]	; (800044c <Normal_clk+0x84>)
 80003ec:	6013      	str	r3, [r2, #0]
			if(sec > 59){
 80003ee:	4b17      	ldr	r3, [pc, #92]	; (800044c <Normal_clk+0x84>)
 80003f0:	681b      	ldr	r3, [r3, #0]
 80003f2:	2b3b      	cmp	r3, #59	; 0x3b
 80003f4:	dd23      	ble.n	800043e <Normal_clk+0x76>
				sec = 0 ;
 80003f6:	4b15      	ldr	r3, [pc, #84]	; (800044c <Normal_clk+0x84>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	601a      	str	r2, [r3, #0]
				min++;
 80003fc:	4b14      	ldr	r3, [pc, #80]	; (8000450 <Normal_clk+0x88>)
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	3301      	adds	r3, #1
 8000402:	4a13      	ldr	r2, [pc, #76]	; (8000450 <Normal_clk+0x88>)
 8000404:	6013      	str	r3, [r2, #0]
				if(min > 59){
 8000406:	4b12      	ldr	r3, [pc, #72]	; (8000450 <Normal_clk+0x88>)
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	2b3b      	cmp	r3, #59	; 0x3b
 800040c:	dd17      	ble.n	800043e <Normal_clk+0x76>
					min = 0;
 800040e:	4b10      	ldr	r3, [pc, #64]	; (8000450 <Normal_clk+0x88>)
 8000410:	2200      	movs	r2, #0
 8000412:	601a      	str	r2, [r3, #0]
					hr ++;
 8000414:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <Normal_clk+0x8c>)
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	3301      	adds	r3, #1
 800041a:	4a0e      	ldr	r2, [pc, #56]	; (8000454 <Normal_clk+0x8c>)
 800041c:	6013      	str	r3, [r2, #0]
					if(hr > 23){
 800041e:	4b0d      	ldr	r3, [pc, #52]	; (8000454 <Normal_clk+0x8c>)
 8000420:	681b      	ldr	r3, [r3, #0]
 8000422:	2b17      	cmp	r3, #23
 8000424:	dd0b      	ble.n	800043e <Normal_clk+0x76>
						hr = 0;
 8000426:	4b0b      	ldr	r3, [pc, #44]	; (8000454 <Normal_clk+0x8c>)
 8000428:	2200      	movs	r2, #0
 800042a:	601a      	str	r2, [r3, #0]
						min = 0;
 800042c:	4b08      	ldr	r3, [pc, #32]	; (8000450 <Normal_clk+0x88>)
 800042e:	2200      	movs	r2, #0
 8000430:	601a      	str	r2, [r3, #0]
						sec = 0;
 8000432:	4b06      	ldr	r3, [pc, #24]	; (800044c <Normal_clk+0x84>)
 8000434:	2200      	movs	r2, #0
 8000436:	601a      	str	r2, [r3, #0]
						msec = 0;
 8000438:	4b03      	ldr	r3, [pc, #12]	; (8000448 <Normal_clk+0x80>)
 800043a:	2200      	movs	r2, #0
 800043c:	601a      	str	r2, [r3, #0]
					}
				}
			}
		}
}
 800043e:	bf00      	nop
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	200000a0 	.word	0x200000a0
 800044c:	20000094 	.word	0x20000094
 8000450:	20000098 	.word	0x20000098
 8000454:	2000009c 	.word	0x2000009c

08000458 <Readbutton>:
void Readbutton(void) {
 8000458:	b580      	push	{r7, lr}
 800045a:	af00      	add	r7, sp, #0

	if(!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) && checkval){
 800045c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000460:	482b      	ldr	r0, [pc, #172]	; (8000510 <Readbutton+0xb8>)
 8000462:	f000 ffbd 	bl	80013e0 <HAL_GPIO_ReadPin>
 8000466:	4603      	mov	r3, r0
 8000468:	2b00      	cmp	r3, #0
 800046a:	d12f      	bne.n	80004cc <Readbutton+0x74>
 800046c:	4b29      	ldr	r3, [pc, #164]	; (8000514 <Readbutton+0xbc>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b00      	cmp	r3, #0
 8000472:	d02b      	beq.n	80004cc <Readbutton+0x74>
		if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 8000474:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000478:	4825      	ldr	r0, [pc, #148]	; (8000510 <Readbutton+0xb8>)
 800047a:	f000 ffb1 	bl	80013e0 <HAL_GPIO_ReadPin>
 800047e:	4603      	mov	r3, r0
 8000480:	2b00      	cmp	r3, #0
 8000482:	d142      	bne.n	800050a <Readbutton+0xb2>
				//fbutton = 1;
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000484:	2120      	movs	r1, #32
 8000486:	4824      	ldr	r0, [pc, #144]	; (8000518 <Readbutton+0xc0>)
 8000488:	f000 ffd9 	bl	800143e <HAL_GPIO_TogglePin>
				//HAL_UART_Transmit(&huart2, "t", 4, 100);
				mode++;
 800048c:	4b23      	ldr	r3, [pc, #140]	; (800051c <Readbutton+0xc4>)
 800048e:	681b      	ldr	r3, [r3, #0]
 8000490:	3301      	adds	r3, #1
 8000492:	4a22      	ldr	r2, [pc, #136]	; (800051c <Readbutton+0xc4>)
 8000494:	6013      	str	r3, [r2, #0]
				if(mode > 4)
 8000496:	4b21      	ldr	r3, [pc, #132]	; (800051c <Readbutton+0xc4>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	2b04      	cmp	r3, #4
 800049c:	dd02      	ble.n	80004a4 <Readbutton+0x4c>
				{
					mode = 0;
 800049e:	4b1f      	ldr	r3, [pc, #124]	; (800051c <Readbutton+0xc4>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	601a      	str	r2, [r3, #0]
				}
				if(mode == 4)
 80004a4:	4b1d      	ldr	r3, [pc, #116]	; (800051c <Readbutton+0xc4>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	2b04      	cmp	r3, #4
 80004aa:	d10b      	bne.n	80004c4 <Readbutton+0x6c>
				{
					msec2 =0 ;
 80004ac:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <Readbutton+0xc8>)
 80004ae:	2200      	movs	r2, #0
 80004b0:	601a      	str	r2, [r3, #0]
					sec2 = 0;
 80004b2:	4b1c      	ldr	r3, [pc, #112]	; (8000524 <Readbutton+0xcc>)
 80004b4:	2200      	movs	r2, #0
 80004b6:	601a      	str	r2, [r3, #0]
					min2 = 0;
 80004b8:	4b1b      	ldr	r3, [pc, #108]	; (8000528 <Readbutton+0xd0>)
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
					m4=false;
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <Readbutton+0xd4>)
 80004c0:	2200      	movs	r2, #0
 80004c2:	701a      	strb	r2, [r3, #0]
				}

				checkval = false;
 80004c4:	4b13      	ldr	r3, [pc, #76]	; (8000514 <Readbutton+0xbc>)
 80004c6:	2200      	movs	r2, #0
 80004c8:	701a      	strb	r2, [r3, #0]
		if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13)) {
 80004ca:	e01e      	b.n	800050a <Readbutton+0xb2>
		}
	}else if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET && checkval == false){
 80004cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004d0:	480f      	ldr	r0, [pc, #60]	; (8000510 <Readbutton+0xb8>)
 80004d2:	f000 ff85 	bl	80013e0 <HAL_GPIO_ReadPin>
 80004d6:	4603      	mov	r3, r0
 80004d8:	2b01      	cmp	r3, #1
 80004da:	d116      	bne.n	800050a <Readbutton+0xb2>
 80004dc:	4b0d      	ldr	r3, [pc, #52]	; (8000514 <Readbutton+0xbc>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	f083 0301 	eor.w	r3, r3, #1
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	2b00      	cmp	r3, #0
 80004e8:	d00f      	beq.n	800050a <Readbutton+0xb2>
			if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13) == GPIO_PIN_SET){
 80004ea:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004ee:	4808      	ldr	r0, [pc, #32]	; (8000510 <Readbutton+0xb8>)
 80004f0:	f000 ff76 	bl	80013e0 <HAL_GPIO_ReadPin>
 80004f4:	4603      	mov	r3, r0
 80004f6:	2b01      	cmp	r3, #1
 80004f8:	d107      	bne.n	800050a <Readbutton+0xb2>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 80004fa:	2120      	movs	r1, #32
 80004fc:	4806      	ldr	r0, [pc, #24]	; (8000518 <Readbutton+0xc0>)
 80004fe:	f000 ff9e 	bl	800143e <HAL_GPIO_TogglePin>
				checkval = true;
 8000502:	4b04      	ldr	r3, [pc, #16]	; (8000514 <Readbutton+0xbc>)
 8000504:	2201      	movs	r2, #1
 8000506:	701a      	strb	r2, [r3, #0]
				//fbutton = 0;
			}
		}
	}
 8000508:	e7ff      	b.n	800050a <Readbutton+0xb2>
 800050a:	bf00      	nop
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	40011000 	.word	0x40011000
 8000514:	20000004 	.word	0x20000004
 8000518:	40010800 	.word	0x40010800
 800051c:	200000b4 	.word	0x200000b4
 8000520:	200000ac 	.word	0x200000ac
 8000524:	200000a4 	.word	0x200000a4
 8000528:	200000a8 	.word	0x200000a8
 800052c:	200000b0 	.word	0x200000b0

08000530 <mode_zero>:
void mode_zero(void){
 8000530:	b580      	push	{r7, lr}
 8000532:	af00      	add	r7, sp, #0
	Normal_clk();
 8000534:	f7ff ff48 	bl	80003c8 <Normal_clk>
}
 8000538:	bf00      	nop
 800053a:	bd80      	pop	{r7, pc}

0800053c <mode_one>:
void mode_one(void){
 800053c:	b480      	push	{r7}
 800053e:	af00      	add	r7, sp, #0
	//Normal_clk();
	if(fbutton2 == 1 && fbuttonpress12s == 0){
 8000540:	4b15      	ldr	r3, [pc, #84]	; (8000598 <mode_one+0x5c>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2b01      	cmp	r3, #1
 8000546:	d10f      	bne.n	8000568 <mode_one+0x2c>
 8000548:	4b14      	ldr	r3, [pc, #80]	; (800059c <mode_one+0x60>)
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d10b      	bne.n	8000568 <mode_one+0x2c>
		hr++;
 8000550:	4b13      	ldr	r3, [pc, #76]	; (80005a0 <mode_one+0x64>)
 8000552:	681b      	ldr	r3, [r3, #0]
 8000554:	3301      	adds	r3, #1
 8000556:	4a12      	ldr	r2, [pc, #72]	; (80005a0 <mode_one+0x64>)
 8000558:	6013      	str	r3, [r2, #0]
		if(hr >23){
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <mode_one+0x64>)
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	2b17      	cmp	r3, #23
 8000560:	dd02      	ble.n	8000568 <mode_one+0x2c>
			hr=0;
 8000562:	4b0f      	ldr	r3, [pc, #60]	; (80005a0 <mode_one+0x64>)
 8000564:	2200      	movs	r2, #0
 8000566:	601a      	str	r2, [r3, #0]
		}
	}
	if(fbutton2 == 1 && fbuttonpress12s == 1){
 8000568:	4b0b      	ldr	r3, [pc, #44]	; (8000598 <mode_one+0x5c>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	2b01      	cmp	r3, #1
 800056e:	d10f      	bne.n	8000590 <mode_one+0x54>
 8000570:	4b0a      	ldr	r3, [pc, #40]	; (800059c <mode_one+0x60>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	2b01      	cmp	r3, #1
 8000576:	d10b      	bne.n	8000590 <mode_one+0x54>
			hr++;
 8000578:	4b09      	ldr	r3, [pc, #36]	; (80005a0 <mode_one+0x64>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	4a08      	ldr	r2, [pc, #32]	; (80005a0 <mode_one+0x64>)
 8000580:	6013      	str	r3, [r2, #0]
			if(hr >23){
 8000582:	4b07      	ldr	r3, [pc, #28]	; (80005a0 <mode_one+0x64>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2b17      	cmp	r3, #23
 8000588:	dd02      	ble.n	8000590 <mode_one+0x54>
				hr=0;
 800058a:	4b05      	ldr	r3, [pc, #20]	; (80005a0 <mode_one+0x64>)
 800058c:	2200      	movs	r2, #0
 800058e:	601a      	str	r2, [r3, #0]
			}
		}
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	bc80      	pop	{r7}
 8000596:	4770      	bx	lr
 8000598:	200000cc 	.word	0x200000cc
 800059c:	200000b8 	.word	0x200000b8
 80005a0:	2000009c 	.word	0x2000009c

080005a4 <mode_two>:
void mode_two(void){
 80005a4:	b480      	push	{r7}
 80005a6:	af00      	add	r7, sp, #0
	if(fbutton2 == 1 && fbuttonpress12s == 0){
 80005a8:	4b1a      	ldr	r3, [pc, #104]	; (8000614 <mode_two+0x70>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	2b01      	cmp	r3, #1
 80005ae:	d114      	bne.n	80005da <mode_two+0x36>
 80005b0:	4b19      	ldr	r3, [pc, #100]	; (8000618 <mode_two+0x74>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d110      	bne.n	80005da <mode_two+0x36>
		min++;
 80005b8:	4b18      	ldr	r3, [pc, #96]	; (800061c <mode_two+0x78>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	3301      	adds	r3, #1
 80005be:	4a17      	ldr	r2, [pc, #92]	; (800061c <mode_two+0x78>)
 80005c0:	6013      	str	r3, [r2, #0]
		if(min > 59){
 80005c2:	4b16      	ldr	r3, [pc, #88]	; (800061c <mode_two+0x78>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	2b3b      	cmp	r3, #59	; 0x3b
 80005c8:	dd07      	ble.n	80005da <mode_two+0x36>
			min = 0;
 80005ca:	4b14      	ldr	r3, [pc, #80]	; (800061c <mode_two+0x78>)
 80005cc:	2200      	movs	r2, #0
 80005ce:	601a      	str	r2, [r3, #0]
			hr++;
 80005d0:	4b13      	ldr	r3, [pc, #76]	; (8000620 <mode_two+0x7c>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	3301      	adds	r3, #1
 80005d6:	4a12      	ldr	r2, [pc, #72]	; (8000620 <mode_two+0x7c>)
 80005d8:	6013      	str	r3, [r2, #0]
		}
	}
	if(fbutton2 == 1 && fbuttonpress12s == 1){
 80005da:	4b0e      	ldr	r3, [pc, #56]	; (8000614 <mode_two+0x70>)
 80005dc:	681b      	ldr	r3, [r3, #0]
 80005de:	2b01      	cmp	r3, #1
 80005e0:	d114      	bne.n	800060c <mode_two+0x68>
 80005e2:	4b0d      	ldr	r3, [pc, #52]	; (8000618 <mode_two+0x74>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	2b01      	cmp	r3, #1
 80005e8:	d110      	bne.n	800060c <mode_two+0x68>
		min++;
 80005ea:	4b0c      	ldr	r3, [pc, #48]	; (800061c <mode_two+0x78>)
 80005ec:	681b      	ldr	r3, [r3, #0]
 80005ee:	3301      	adds	r3, #1
 80005f0:	4a0a      	ldr	r2, [pc, #40]	; (800061c <mode_two+0x78>)
 80005f2:	6013      	str	r3, [r2, #0]
		if(min >59){
 80005f4:	4b09      	ldr	r3, [pc, #36]	; (800061c <mode_two+0x78>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	2b3b      	cmp	r3, #59	; 0x3b
 80005fa:	dd07      	ble.n	800060c <mode_two+0x68>
			min = 0;
 80005fc:	4b07      	ldr	r3, [pc, #28]	; (800061c <mode_two+0x78>)
 80005fe:	2200      	movs	r2, #0
 8000600:	601a      	str	r2, [r3, #0]
			hr++;
 8000602:	4b07      	ldr	r3, [pc, #28]	; (8000620 <mode_two+0x7c>)
 8000604:	681b      	ldr	r3, [r3, #0]
 8000606:	3301      	adds	r3, #1
 8000608:	4a05      	ldr	r2, [pc, #20]	; (8000620 <mode_two+0x7c>)
 800060a:	6013      	str	r3, [r2, #0]
		}
		}
}
 800060c:	bf00      	nop
 800060e:	46bd      	mov	sp, r7
 8000610:	bc80      	pop	{r7}
 8000612:	4770      	bx	lr
 8000614:	200000cc 	.word	0x200000cc
 8000618:	200000b8 	.word	0x200000b8
 800061c:	20000098 	.word	0x20000098
 8000620:	2000009c 	.word	0x2000009c

08000624 <mode_three>:
void mode_three(void){
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
	if(fbutton2 == 1 && fbuttonpress12s == 0){
 8000628:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <mode_three+0xbc>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	2b01      	cmp	r3, #1
 800062e:	d127      	bne.n	8000680 <mode_three+0x5c>
 8000630:	4b2c      	ldr	r3, [pc, #176]	; (80006e4 <mode_three+0xc0>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	2b00      	cmp	r3, #0
 8000636:	d123      	bne.n	8000680 <mode_three+0x5c>
		sec++;
 8000638:	4b2b      	ldr	r3, [pc, #172]	; (80006e8 <mode_three+0xc4>)
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	3301      	adds	r3, #1
 800063e:	4a2a      	ldr	r2, [pc, #168]	; (80006e8 <mode_three+0xc4>)
 8000640:	6013      	str	r3, [r2, #0]
		if(sec > 59){
 8000642:	4b29      	ldr	r3, [pc, #164]	; (80006e8 <mode_three+0xc4>)
 8000644:	681b      	ldr	r3, [r3, #0]
 8000646:	2b3b      	cmp	r3, #59	; 0x3b
 8000648:	dd1a      	ble.n	8000680 <mode_three+0x5c>
			min++;
 800064a:	4b28      	ldr	r3, [pc, #160]	; (80006ec <mode_three+0xc8>)
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	3301      	adds	r3, #1
 8000650:	4a26      	ldr	r2, [pc, #152]	; (80006ec <mode_three+0xc8>)
 8000652:	6013      	str	r3, [r2, #0]
			if(min > 59){
 8000654:	4b25      	ldr	r3, [pc, #148]	; (80006ec <mode_three+0xc8>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2b3b      	cmp	r3, #59	; 0x3b
 800065a:	dd11      	ble.n	8000680 <mode_three+0x5c>
				hr++;
 800065c:	4b24      	ldr	r3, [pc, #144]	; (80006f0 <mode_three+0xcc>)
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	3301      	adds	r3, #1
 8000662:	4a23      	ldr	r2, [pc, #140]	; (80006f0 <mode_three+0xcc>)
 8000664:	6013      	str	r3, [r2, #0]
				if(hr > 23){
 8000666:	4b22      	ldr	r3, [pc, #136]	; (80006f0 <mode_three+0xcc>)
 8000668:	681b      	ldr	r3, [r3, #0]
 800066a:	2b17      	cmp	r3, #23
 800066c:	dd08      	ble.n	8000680 <mode_three+0x5c>
					min = 0;
 800066e:	4b1f      	ldr	r3, [pc, #124]	; (80006ec <mode_three+0xc8>)
 8000670:	2200      	movs	r2, #0
 8000672:	601a      	str	r2, [r3, #0]
					hr = 0;
 8000674:	4b1e      	ldr	r3, [pc, #120]	; (80006f0 <mode_three+0xcc>)
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
					sec = 0;
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <mode_three+0xc4>)
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
	if(fbutton2 == 1 && fbuttonpress12s == 1){
 8000680:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <mode_three+0xbc>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d127      	bne.n	80006d8 <mode_three+0xb4>
 8000688:	4b16      	ldr	r3, [pc, #88]	; (80006e4 <mode_three+0xc0>)
 800068a:	681b      	ldr	r3, [r3, #0]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d123      	bne.n	80006d8 <mode_three+0xb4>
		sec++;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <mode_three+0xc4>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	3301      	adds	r3, #1
 8000696:	4a14      	ldr	r2, [pc, #80]	; (80006e8 <mode_three+0xc4>)
 8000698:	6013      	str	r3, [r2, #0]
		if(sec > 59){
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <mode_three+0xc4>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	2b3b      	cmp	r3, #59	; 0x3b
 80006a0:	dd1a      	ble.n	80006d8 <mode_three+0xb4>
			min++;
 80006a2:	4b12      	ldr	r3, [pc, #72]	; (80006ec <mode_three+0xc8>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	3301      	adds	r3, #1
 80006a8:	4a10      	ldr	r2, [pc, #64]	; (80006ec <mode_three+0xc8>)
 80006aa:	6013      	str	r3, [r2, #0]
			if(min > 59){
 80006ac:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <mode_three+0xc8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	2b3b      	cmp	r3, #59	; 0x3b
 80006b2:	dd11      	ble.n	80006d8 <mode_three+0xb4>
				hr++;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	; (80006f0 <mode_three+0xcc>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	3301      	adds	r3, #1
 80006ba:	4a0d      	ldr	r2, [pc, #52]	; (80006f0 <mode_three+0xcc>)
 80006bc:	6013      	str	r3, [r2, #0]
				if(hr > 23){
 80006be:	4b0c      	ldr	r3, [pc, #48]	; (80006f0 <mode_three+0xcc>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	2b17      	cmp	r3, #23
 80006c4:	dd08      	ble.n	80006d8 <mode_three+0xb4>
					min = 0;
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <mode_three+0xc8>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	601a      	str	r2, [r3, #0]
					hr = 0;
 80006cc:	4b08      	ldr	r3, [pc, #32]	; (80006f0 <mode_three+0xcc>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	601a      	str	r2, [r3, #0]
					sec = 0;
 80006d2:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <mode_three+0xc4>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 80006d8:	bf00      	nop
 80006da:	46bd      	mov	sp, r7
 80006dc:	bc80      	pop	{r7}
 80006de:	4770      	bx	lr
 80006e0:	200000cc 	.word	0x200000cc
 80006e4:	200000b8 	.word	0x200000b8
 80006e8:	20000094 	.word	0x20000094
 80006ec:	20000098 	.word	0x20000098
 80006f0:	2000009c 	.word	0x2000009c

080006f4 <mode_four>:
void mode_four(void){
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0
	if(m4 == true){
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <mode_four+0x68>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d029      	beq.n	8000754 <mode_four+0x60>

	msec2++;
 8000700:	4b17      	ldr	r3, [pc, #92]	; (8000760 <mode_four+0x6c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	3301      	adds	r3, #1
 8000706:	4a16      	ldr	r2, [pc, #88]	; (8000760 <mode_four+0x6c>)
 8000708:	6013      	str	r3, [r2, #0]
		if(msec2 > 99){
 800070a:	4b15      	ldr	r3, [pc, #84]	; (8000760 <mode_four+0x6c>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	2b63      	cmp	r3, #99	; 0x63
 8000710:	dd20      	ble.n	8000754 <mode_four+0x60>
			msec2 = 0;
 8000712:	4b13      	ldr	r3, [pc, #76]	; (8000760 <mode_four+0x6c>)
 8000714:	2200      	movs	r2, #0
 8000716:	601a      	str	r2, [r3, #0]
			sec2 ++;
 8000718:	4b12      	ldr	r3, [pc, #72]	; (8000764 <mode_four+0x70>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	3301      	adds	r3, #1
 800071e:	4a11      	ldr	r2, [pc, #68]	; (8000764 <mode_four+0x70>)
 8000720:	6013      	str	r3, [r2, #0]
			if(sec2 > 59){
 8000722:	4b10      	ldr	r3, [pc, #64]	; (8000764 <mode_four+0x70>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	2b3b      	cmp	r3, #59	; 0x3b
 8000728:	dd14      	ble.n	8000754 <mode_four+0x60>
				sec2 = 0 ;
 800072a:	4b0e      	ldr	r3, [pc, #56]	; (8000764 <mode_four+0x70>)
 800072c:	2200      	movs	r2, #0
 800072e:	601a      	str	r2, [r3, #0]
				min2++;
 8000730:	4b0d      	ldr	r3, [pc, #52]	; (8000768 <mode_four+0x74>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	3301      	adds	r3, #1
 8000736:	4a0c      	ldr	r2, [pc, #48]	; (8000768 <mode_four+0x74>)
 8000738:	6013      	str	r3, [r2, #0]
				if(min2 > 59){
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <mode_four+0x74>)
 800073c:	681b      	ldr	r3, [r3, #0]
 800073e:	2b3b      	cmp	r3, #59	; 0x3b
 8000740:	dd08      	ble.n	8000754 <mode_four+0x60>
					min2 = 0;
 8000742:	4b09      	ldr	r3, [pc, #36]	; (8000768 <mode_four+0x74>)
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
					sec2 = 0;
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <mode_four+0x70>)
 800074a:	2200      	movs	r2, #0
 800074c:	601a      	str	r2, [r3, #0]
					msec2 = 0;
 800074e:	4b04      	ldr	r3, [pc, #16]	; (8000760 <mode_four+0x6c>)
 8000750:	2200      	movs	r2, #0
 8000752:	601a      	str	r2, [r3, #0]
				}
			}
		}
	}
}
 8000754:	bf00      	nop
 8000756:	46bd      	mov	sp, r7
 8000758:	bc80      	pop	{r7}
 800075a:	4770      	bx	lr
 800075c:	200000b0 	.word	0x200000b0
 8000760:	200000ac 	.word	0x200000ac
 8000764:	200000a4 	.word	0x200000a4
 8000768:	200000a8 	.word	0x200000a8

0800076c <Readbutton2>:
enum {STATE13, STATE23, STATE33, STATE43} eState3;
void Readbutton2(void) {
 800076c:	b580      	push	{r7, lr}
 800076e:	af00      	add	r7, sp, #0
	if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)){
 8000770:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000774:	484b      	ldr	r0, [pc, #300]	; (80008a4 <Readbutton2+0x138>)
 8000776:	f000 fe33 	bl	80013e0 <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d12b      	bne.n	80007d8 <Readbutton2+0x6c>
		fbutton2 = 1;
 8000780:	4b49      	ldr	r3, [pc, #292]	; (80008a8 <Readbutton2+0x13c>)
 8000782:	2201      	movs	r2, #1
 8000784:	601a      	str	r2, [r3, #0]
		count++;
 8000786:	4b49      	ldr	r3, [pc, #292]	; (80008ac <Readbutton2+0x140>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	3301      	adds	r3, #1
 800078c:	4a47      	ldr	r2, [pc, #284]	; (80008ac <Readbutton2+0x140>)
 800078e:	6013      	str	r3, [r2, #0]
		if(count == 20){
 8000790:	4b46      	ldr	r3, [pc, #280]	; (80008ac <Readbutton2+0x140>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	2b14      	cmp	r3, #20
 8000796:	d11f      	bne.n	80007d8 <Readbutton2+0x6c>
			fbuttonpress12s = 1;
 8000798:	4b45      	ldr	r3, [pc, #276]	; (80008b0 <Readbutton2+0x144>)
 800079a:	2201      	movs	r2, #1
 800079c:	601a      	str	r2, [r3, #0]
			switch(mode){
 800079e:	4b45      	ldr	r3, [pc, #276]	; (80008b4 <Readbutton2+0x148>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	2b03      	cmp	r3, #3
 80007a4:	d815      	bhi.n	80007d2 <Readbutton2+0x66>
 80007a6:	a201      	add	r2, pc, #4	; (adr r2, 80007ac <Readbutton2+0x40>)
 80007a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007ac:	080007bd 	.word	0x080007bd
 80007b0:	080007c1 	.word	0x080007c1
 80007b4:	080007c7 	.word	0x080007c7
 80007b8:	080007cd 	.word	0x080007cd
						case 0:
							mode_zero();
 80007bc:	f7ff feb8 	bl	8000530 <mode_zero>
						case 1:
							//Normal_clk();

							mode_one();
 80007c0:	f7ff febc 	bl	800053c <mode_one>
							break;
 80007c4:	e005      	b.n	80007d2 <Readbutton2+0x66>
						case 2:
							mode_two();
 80007c6:	f7ff feed 	bl	80005a4 <mode_two>
							break;
 80007ca:	e002      	b.n	80007d2 <Readbutton2+0x66>
						case 3:
							mode_three();
 80007cc:	f7ff ff2a 	bl	8000624 <mode_three>
							break;
 80007d0:	bf00      	nop
							//Normal_clk();
						}
			count=0;
 80007d2:	4b36      	ldr	r3, [pc, #216]	; (80008ac <Readbutton2+0x140>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
		}
	}
	if(!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) && checkval2){
 80007d8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007dc:	4831      	ldr	r0, [pc, #196]	; (80008a4 <Readbutton2+0x138>)
 80007de:	f000 fdff 	bl	80013e0 <HAL_GPIO_ReadPin>
 80007e2:	4603      	mov	r3, r0
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d132      	bne.n	800084e <Readbutton2+0xe2>
 80007e8:	4b33      	ldr	r3, [pc, #204]	; (80008b8 <Readbutton2+0x14c>)
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d02e      	beq.n	800084e <Readbutton2+0xe2>
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) {
 80007f0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80007f4:	482b      	ldr	r0, [pc, #172]	; (80008a4 <Readbutton2+0x138>)
 80007f6:	f000 fdf3 	bl	80013e0 <HAL_GPIO_ReadPin>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d14e      	bne.n	800089e <Readbutton2+0x132>
			HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 8000800:	2120      	movs	r1, #32
 8000802:	4828      	ldr	r0, [pc, #160]	; (80008a4 <Readbutton2+0x138>)
 8000804:	f000 fe1b 	bl	800143e <HAL_GPIO_TogglePin>
			fbutton2 = 1;
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <Readbutton2+0x13c>)
 800080a:	2201      	movs	r2, #1
 800080c:	601a      	str	r2, [r3, #0]
			//m4 = true;
			if(m4){
 800080e:	4b2b      	ldr	r3, [pc, #172]	; (80008bc <Readbutton2+0x150>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	2b00      	cmp	r3, #0
 8000814:	d003      	beq.n	800081e <Readbutton2+0xb2>
				m4 = false;
 8000816:	4b29      	ldr	r3, [pc, #164]	; (80008bc <Readbutton2+0x150>)
 8000818:	2200      	movs	r2, #0
 800081a:	701a      	strb	r2, [r3, #0]
 800081c:	e002      	b.n	8000824 <Readbutton2+0xb8>
			}
			else{
				m4 = true;
 800081e:	4b27      	ldr	r3, [pc, #156]	; (80008bc <Readbutton2+0x150>)
 8000820:	2201      	movs	r2, #1
 8000822:	701a      	strb	r2, [r3, #0]
			}
			switch(mode){
 8000824:	4b23      	ldr	r3, [pc, #140]	; (80008b4 <Readbutton2+0x148>)
 8000826:	681b      	ldr	r3, [r3, #0]
 8000828:	2b02      	cmp	r3, #2
 800082a:	d006      	beq.n	800083a <Readbutton2+0xce>
 800082c:	2b03      	cmp	r3, #3
 800082e:	d007      	beq.n	8000840 <Readbutton2+0xd4>
 8000830:	2b01      	cmp	r3, #1
 8000832:	d108      	bne.n	8000846 <Readbutton2+0xda>
			case 1:
				mode_one();
 8000834:	f7ff fe82 	bl	800053c <mode_one>
				break;
 8000838:	e005      	b.n	8000846 <Readbutton2+0xda>
			case 2:
				mode_two();
 800083a:	f7ff feb3 	bl	80005a4 <mode_two>
				break;
 800083e:	e002      	b.n	8000846 <Readbutton2+0xda>
			case 3:
				mode_three();
 8000840:	f7ff fef0 	bl	8000624 <mode_three>
				break;
 8000844:	bf00      	nop

				//Normal_clk();
			}
				checkval2 = 0;
 8000846:	4b1c      	ldr	r3, [pc, #112]	; (80008b8 <Readbutton2+0x14c>)
 8000848:	2200      	movs	r2, #0
 800084a:	701a      	strb	r2, [r3, #0]
		if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10)) {
 800084c:	e027      	b.n	800089e <Readbutton2+0x132>
		}
	}else if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET && checkval2 == false){
 800084e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000852:	4814      	ldr	r0, [pc, #80]	; (80008a4 <Readbutton2+0x138>)
 8000854:	f000 fdc4 	bl	80013e0 <HAL_GPIO_ReadPin>
 8000858:	4603      	mov	r3, r0
 800085a:	2b01      	cmp	r3, #1
 800085c:	d11f      	bne.n	800089e <Readbutton2+0x132>
 800085e:	4b16      	ldr	r3, [pc, #88]	; (80008b8 <Readbutton2+0x14c>)
 8000860:	781b      	ldrb	r3, [r3, #0]
 8000862:	f083 0301 	eor.w	r3, r3, #1
 8000866:	b2db      	uxtb	r3, r3
 8000868:	2b00      	cmp	r3, #0
 800086a:	d018      	beq.n	800089e <Readbutton2+0x132>
			if(HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_10) == GPIO_PIN_SET){
 800086c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000870:	480c      	ldr	r0, [pc, #48]	; (80008a4 <Readbutton2+0x138>)
 8000872:	f000 fdb5 	bl	80013e0 <HAL_GPIO_ReadPin>
 8000876:	4603      	mov	r3, r0
 8000878:	2b01      	cmp	r3, #1
 800087a:	d110      	bne.n	800089e <Readbutton2+0x132>
				HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_5);
 800087c:	2120      	movs	r1, #32
 800087e:	4809      	ldr	r0, [pc, #36]	; (80008a4 <Readbutton2+0x138>)
 8000880:	f000 fddd 	bl	800143e <HAL_GPIO_TogglePin>
				fbuttonpress12s = 0;
 8000884:	4b0a      	ldr	r3, [pc, #40]	; (80008b0 <Readbutton2+0x144>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
				//count12 = 0;
				count = 0;
 800088a:	4b08      	ldr	r3, [pc, #32]	; (80008ac <Readbutton2+0x140>)
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
				checkval2 = 1;
 8000890:	4b09      	ldr	r3, [pc, #36]	; (80008b8 <Readbutton2+0x14c>)
 8000892:	2201      	movs	r2, #1
 8000894:	701a      	strb	r2, [r3, #0]
				fbutton2 = 0;
 8000896:	4b04      	ldr	r3, [pc, #16]	; (80008a8 <Readbutton2+0x13c>)
 8000898:	2200      	movs	r2, #0
 800089a:	601a      	str	r2, [r3, #0]
				//m4 = 0;
			}
		}
}
 800089c:	e7ff      	b.n	800089e <Readbutton2+0x132>
 800089e:	bf00      	nop
 80008a0:	bd80      	pop	{r7, pc}
 80008a2:	bf00      	nop
 80008a4:	40010800 	.word	0x40010800
 80008a8:	200000cc 	.word	0x200000cc
 80008ac:	200000bc 	.word	0x200000bc
 80008b0:	200000b8 	.word	0x200000b8
 80008b4:	200000b4 	.word	0x200000b4
 80008b8:	20000005 	.word	0x20000005
 80008bc:	200000b0 	.word	0x200000b0

080008c0 <HAL_TIM_PeriodElapsedCallback>:

//enum {STATE12, STATE22, STATE32, STATE42} eState2;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *time){
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b082      	sub	sp, #8
 80008c4:	af00      	add	r7, sp, #0
 80008c6:	6078      	str	r0, [r7, #4]
	if(mode != 4){
 80008c8:	4b12      	ldr	r3, [pc, #72]	; (8000914 <HAL_TIM_PeriodElapsedCallback+0x54>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	2b04      	cmp	r3, #4
 80008ce:	d00c      	beq.n	80008ea <HAL_TIM_PeriodElapsedCallback+0x2a>
		Normal_clk();
 80008d0:	f7ff fd7a 	bl	80003c8 <Normal_clk>
		print_to_ter(msec,sec,min,hr);
 80008d4:	4b10      	ldr	r3, [pc, #64]	; (8000918 <HAL_TIM_PeriodElapsedCallback+0x58>)
 80008d6:	6818      	ldr	r0, [r3, #0]
 80008d8:	4b10      	ldr	r3, [pc, #64]	; (800091c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80008da:	6819      	ldr	r1, [r3, #0]
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b10      	ldr	r3, [pc, #64]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f000 f826 	bl	8000934 <print_to_ter>
 80008e8:	e00b      	b.n	8000902 <HAL_TIM_PeriodElapsedCallback+0x42>
	}else{
		 mode_four();
 80008ea:	f7ff ff03 	bl	80006f4 <mode_four>
		print_to_ter(msec2,sec2,min2,hr);
 80008ee:	4b0e      	ldr	r3, [pc, #56]	; (8000928 <HAL_TIM_PeriodElapsedCallback+0x68>)
 80008f0:	6818      	ldr	r0, [r3, #0]
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <HAL_TIM_PeriodElapsedCallback+0x6c>)
 80008f4:	6819      	ldr	r1, [r3, #0]
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <HAL_TIM_PeriodElapsedCallback+0x70>)
 80008f8:	681a      	ldr	r2, [r3, #0]
 80008fa:	4b0a      	ldr	r3, [pc, #40]	; (8000924 <HAL_TIM_PeriodElapsedCallback+0x64>)
 80008fc:	681b      	ldr	r3, [r3, #0]
 80008fe:	f000 f819 	bl	8000934 <print_to_ter>
	}

	Readbutton();
 8000902:	f7ff fda9 	bl	8000458 <Readbutton>
	Readbutton2();
 8000906:	f7ff ff31 	bl	800076c <Readbutton2>
}
 800090a:	bf00      	nop
 800090c:	3708      	adds	r7, #8
 800090e:	46bd      	mov	sp, r7
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000b4 	.word	0x200000b4
 8000918:	200000a0 	.word	0x200000a0
 800091c:	20000094 	.word	0x20000094
 8000920:	20000098 	.word	0x20000098
 8000924:	2000009c 	.word	0x2000009c
 8000928:	200000ac 	.word	0x200000ac
 800092c:	200000a4 	.word	0x200000a4
 8000930:	200000a8 	.word	0x200000a8

08000934 <print_to_ter>:
void print_to_ter(int a,int b,int c,int d){
 8000934:	b580      	push	{r7, lr}
 8000936:	b086      	sub	sp, #24
 8000938:	af02      	add	r7, sp, #8
 800093a:	60f8      	str	r0, [r7, #12]
 800093c:	60b9      	str	r1, [r7, #8]
 800093e:	607a      	str	r2, [r7, #4]
 8000940:	603b      	str	r3, [r7, #0]
	switch(mode){
 8000942:	4b9f      	ldr	r3, [pc, #636]	; (8000bc0 <print_to_ter+0x28c>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	2b04      	cmp	r3, #4
 8000948:	f200 8136 	bhi.w	8000bb8 <print_to_ter+0x284>
 800094c:	a201      	add	r2, pc, #4	; (adr r2, 8000954 <print_to_ter+0x20>)
 800094e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000952:	bf00      	nop
 8000954:	08000969 	.word	0x08000969
 8000958:	080009ad 	.word	0x080009ad
 800095c:	08000a45 	.word	0x08000a45
 8000960:	08000add 	.word	0x08000add
 8000964:	08000b75 	.word	0x08000b75
	case 0:
		buf_len = sprintf(buf, "\033[2J]	");
 8000968:	4b96      	ldr	r3, [pc, #600]	; (8000bc4 <print_to_ter+0x290>)
 800096a:	4a97      	ldr	r2, [pc, #604]	; (8000bc8 <print_to_ter+0x294>)
 800096c:	6810      	ldr	r0, [r2, #0]
 800096e:	6018      	str	r0, [r3, #0]
 8000970:	8891      	ldrh	r1, [r2, #4]
 8000972:	7992      	ldrb	r2, [r2, #6]
 8000974:	8099      	strh	r1, [r3, #4]
 8000976:	719a      	strb	r2, [r3, #6]
 8000978:	2206      	movs	r2, #6
 800097a:	4b94      	ldr	r3, [pc, #592]	; (8000bcc <print_to_ter+0x298>)
 800097c:	601a      	str	r2, [r3, #0]
		buf_len = sprintf(buf, "mode%u %u:%u:%u      \r",mode,d,c,b);
 800097e:	4b90      	ldr	r3, [pc, #576]	; (8000bc0 <print_to_ter+0x28c>)
 8000980:	681a      	ldr	r2, [r3, #0]
 8000982:	68bb      	ldr	r3, [r7, #8]
 8000984:	9301      	str	r3, [sp, #4]
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	9300      	str	r3, [sp, #0]
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	4990      	ldr	r1, [pc, #576]	; (8000bd0 <print_to_ter+0x29c>)
 800098e:	488d      	ldr	r0, [pc, #564]	; (8000bc4 <print_to_ter+0x290>)
 8000990:	f001 ff62 	bl	8002858 <siprintf>
 8000994:	4602      	mov	r2, r0
 8000996:	4b8d      	ldr	r3, [pc, #564]	; (8000bcc <print_to_ter+0x298>)
 8000998:	601a      	str	r2, [r3, #0]
		HAL_UART_Transmit(&huart2, (uint8_t *) buf, buf_len, 100);
 800099a:	4b8c      	ldr	r3, [pc, #560]	; (8000bcc <print_to_ter+0x298>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	b29a      	uxth	r2, r3
 80009a0:	2364      	movs	r3, #100	; 0x64
 80009a2:	4988      	ldr	r1, [pc, #544]	; (8000bc4 <print_to_ter+0x290>)
 80009a4:	488b      	ldr	r0, [pc, #556]	; (8000bd4 <print_to_ter+0x2a0>)
 80009a6:	f001 fdba 	bl	800251e <HAL_UART_Transmit>
		break;
 80009aa:	e105      	b.n	8000bb8 <print_to_ter+0x284>
	case 1:
		if(BL){
 80009ac:	4b8a      	ldr	r3, [pc, #552]	; (8000bd8 <print_to_ter+0x2a4>)
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	2b00      	cmp	r3, #0
 80009b2:	d024      	beq.n	80009fe <print_to_ter+0xca>
			buf_len = sprintf(buf, "\033[2J]	");
 80009b4:	4b83      	ldr	r3, [pc, #524]	; (8000bc4 <print_to_ter+0x290>)
 80009b6:	4a84      	ldr	r2, [pc, #528]	; (8000bc8 <print_to_ter+0x294>)
 80009b8:	6810      	ldr	r0, [r2, #0]
 80009ba:	6018      	str	r0, [r3, #0]
 80009bc:	8891      	ldrh	r1, [r2, #4]
 80009be:	7992      	ldrb	r2, [r2, #6]
 80009c0:	8099      	strh	r1, [r3, #4]
 80009c2:	719a      	strb	r2, [r3, #6]
 80009c4:	2206      	movs	r2, #6
 80009c6:	4b81      	ldr	r3, [pc, #516]	; (8000bcc <print_to_ter+0x298>)
 80009c8:	601a      	str	r2, [r3, #0]
			buf_len = sprintf(buf, "mode%u %u:%u:%u      \r",mode,d,c,b);
 80009ca:	4b7d      	ldr	r3, [pc, #500]	; (8000bc0 <print_to_ter+0x28c>)
 80009cc:	681a      	ldr	r2, [r3, #0]
 80009ce:	68bb      	ldr	r3, [r7, #8]
 80009d0:	9301      	str	r3, [sp, #4]
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	9300      	str	r3, [sp, #0]
 80009d6:	683b      	ldr	r3, [r7, #0]
 80009d8:	497d      	ldr	r1, [pc, #500]	; (8000bd0 <print_to_ter+0x29c>)
 80009da:	487a      	ldr	r0, [pc, #488]	; (8000bc4 <print_to_ter+0x290>)
 80009dc:	f001 ff3c 	bl	8002858 <siprintf>
 80009e0:	4602      	mov	r2, r0
 80009e2:	4b7a      	ldr	r3, [pc, #488]	; (8000bcc <print_to_ter+0x298>)
 80009e4:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *) buf, buf_len, 100);
 80009e6:	4b79      	ldr	r3, [pc, #484]	; (8000bcc <print_to_ter+0x298>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	2364      	movs	r3, #100	; 0x64
 80009ee:	4975      	ldr	r1, [pc, #468]	; (8000bc4 <print_to_ter+0x290>)
 80009f0:	4878      	ldr	r0, [pc, #480]	; (8000bd4 <print_to_ter+0x2a0>)
 80009f2:	f001 fd94 	bl	800251e <HAL_UART_Transmit>
			BL = false;
 80009f6:	4b78      	ldr	r3, [pc, #480]	; (8000bd8 <print_to_ter+0x2a4>)
 80009f8:	2200      	movs	r2, #0
 80009fa:	701a      	strb	r2, [r3, #0]
			buf_len = sprintf(buf, "\033[2J]	");
			buf_len = sprintf(buf, "mode%u  :%u:%u      \r",mode,c,b);
			HAL_UART_Transmit(&huart2, (uint8_t *) buf, buf_len, 100);
			BL = true;
		}
		break;
 80009fc:	e0dc      	b.n	8000bb8 <print_to_ter+0x284>
			buf_len = sprintf(buf, "\033[2J]	");
 80009fe:	4b71      	ldr	r3, [pc, #452]	; (8000bc4 <print_to_ter+0x290>)
 8000a00:	4a71      	ldr	r2, [pc, #452]	; (8000bc8 <print_to_ter+0x294>)
 8000a02:	6810      	ldr	r0, [r2, #0]
 8000a04:	6018      	str	r0, [r3, #0]
 8000a06:	8891      	ldrh	r1, [r2, #4]
 8000a08:	7992      	ldrb	r2, [r2, #6]
 8000a0a:	8099      	strh	r1, [r3, #4]
 8000a0c:	719a      	strb	r2, [r3, #6]
 8000a0e:	2206      	movs	r2, #6
 8000a10:	4b6e      	ldr	r3, [pc, #440]	; (8000bcc <print_to_ter+0x298>)
 8000a12:	601a      	str	r2, [r3, #0]
			buf_len = sprintf(buf, "mode%u  :%u:%u      \r",mode,c,b);
 8000a14:	4b6a      	ldr	r3, [pc, #424]	; (8000bc0 <print_to_ter+0x28c>)
 8000a16:	681a      	ldr	r2, [r3, #0]
 8000a18:	68bb      	ldr	r3, [r7, #8]
 8000a1a:	9300      	str	r3, [sp, #0]
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	496f      	ldr	r1, [pc, #444]	; (8000bdc <print_to_ter+0x2a8>)
 8000a20:	4868      	ldr	r0, [pc, #416]	; (8000bc4 <print_to_ter+0x290>)
 8000a22:	f001 ff19 	bl	8002858 <siprintf>
 8000a26:	4602      	mov	r2, r0
 8000a28:	4b68      	ldr	r3, [pc, #416]	; (8000bcc <print_to_ter+0x298>)
 8000a2a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *) buf, buf_len, 100);
 8000a2c:	4b67      	ldr	r3, [pc, #412]	; (8000bcc <print_to_ter+0x298>)
 8000a2e:	681b      	ldr	r3, [r3, #0]
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	2364      	movs	r3, #100	; 0x64
 8000a34:	4963      	ldr	r1, [pc, #396]	; (8000bc4 <print_to_ter+0x290>)
 8000a36:	4867      	ldr	r0, [pc, #412]	; (8000bd4 <print_to_ter+0x2a0>)
 8000a38:	f001 fd71 	bl	800251e <HAL_UART_Transmit>
			BL = true;
 8000a3c:	4b66      	ldr	r3, [pc, #408]	; (8000bd8 <print_to_ter+0x2a4>)
 8000a3e:	2201      	movs	r2, #1
 8000a40:	701a      	strb	r2, [r3, #0]
		break;
 8000a42:	e0b9      	b.n	8000bb8 <print_to_ter+0x284>
	case 2:
		if(BL){
 8000a44:	4b64      	ldr	r3, [pc, #400]	; (8000bd8 <print_to_ter+0x2a4>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d024      	beq.n	8000a96 <print_to_ter+0x162>
			buf_len = sprintf(buf, "\033[2J]	");
 8000a4c:	4b5d      	ldr	r3, [pc, #372]	; (8000bc4 <print_to_ter+0x290>)
 8000a4e:	4a5e      	ldr	r2, [pc, #376]	; (8000bc8 <print_to_ter+0x294>)
 8000a50:	6810      	ldr	r0, [r2, #0]
 8000a52:	6018      	str	r0, [r3, #0]
 8000a54:	8891      	ldrh	r1, [r2, #4]
 8000a56:	7992      	ldrb	r2, [r2, #6]
 8000a58:	8099      	strh	r1, [r3, #4]
 8000a5a:	719a      	strb	r2, [r3, #6]
 8000a5c:	2206      	movs	r2, #6
 8000a5e:	4b5b      	ldr	r3, [pc, #364]	; (8000bcc <print_to_ter+0x298>)
 8000a60:	601a      	str	r2, [r3, #0]
			buf_len = sprintf(buf, "mode%u %u:%u:%u      \r",mode,d,c,b);
 8000a62:	4b57      	ldr	r3, [pc, #348]	; (8000bc0 <print_to_ter+0x28c>)
 8000a64:	681a      	ldr	r2, [r3, #0]
 8000a66:	68bb      	ldr	r3, [r7, #8]
 8000a68:	9301      	str	r3, [sp, #4]
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	9300      	str	r3, [sp, #0]
 8000a6e:	683b      	ldr	r3, [r7, #0]
 8000a70:	4957      	ldr	r1, [pc, #348]	; (8000bd0 <print_to_ter+0x29c>)
 8000a72:	4854      	ldr	r0, [pc, #336]	; (8000bc4 <print_to_ter+0x290>)
 8000a74:	f001 fef0 	bl	8002858 <siprintf>
 8000a78:	4602      	mov	r2, r0
 8000a7a:	4b54      	ldr	r3, [pc, #336]	; (8000bcc <print_to_ter+0x298>)
 8000a7c:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *) buf, buf_len, 100);
 8000a7e:	4b53      	ldr	r3, [pc, #332]	; (8000bcc <print_to_ter+0x298>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	b29a      	uxth	r2, r3
 8000a84:	2364      	movs	r3, #100	; 0x64
 8000a86:	494f      	ldr	r1, [pc, #316]	; (8000bc4 <print_to_ter+0x290>)
 8000a88:	4852      	ldr	r0, [pc, #328]	; (8000bd4 <print_to_ter+0x2a0>)
 8000a8a:	f001 fd48 	bl	800251e <HAL_UART_Transmit>
			BL = false;
 8000a8e:	4b52      	ldr	r3, [pc, #328]	; (8000bd8 <print_to_ter+0x2a4>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	701a      	strb	r2, [r3, #0]
			buf_len = sprintf(buf, "\033[2J]	");
			buf_len = sprintf(buf, "mode%u %u: :%u      \r",mode,d,b);
			HAL_UART_Transmit(&huart2, (uint8_t *) buf, buf_len, 100);
			BL = true;
		}
		break;
 8000a94:	e090      	b.n	8000bb8 <print_to_ter+0x284>
			buf_len = sprintf(buf, "\033[2J]	");
 8000a96:	4b4b      	ldr	r3, [pc, #300]	; (8000bc4 <print_to_ter+0x290>)
 8000a98:	4a4b      	ldr	r2, [pc, #300]	; (8000bc8 <print_to_ter+0x294>)
 8000a9a:	6810      	ldr	r0, [r2, #0]
 8000a9c:	6018      	str	r0, [r3, #0]
 8000a9e:	8891      	ldrh	r1, [r2, #4]
 8000aa0:	7992      	ldrb	r2, [r2, #6]
 8000aa2:	8099      	strh	r1, [r3, #4]
 8000aa4:	719a      	strb	r2, [r3, #6]
 8000aa6:	2206      	movs	r2, #6
 8000aa8:	4b48      	ldr	r3, [pc, #288]	; (8000bcc <print_to_ter+0x298>)
 8000aaa:	601a      	str	r2, [r3, #0]
			buf_len = sprintf(buf, "mode%u %u: :%u      \r",mode,d,b);
 8000aac:	4b44      	ldr	r3, [pc, #272]	; (8000bc0 <print_to_ter+0x28c>)
 8000aae:	681a      	ldr	r2, [r3, #0]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
 8000ab2:	9300      	str	r3, [sp, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	494a      	ldr	r1, [pc, #296]	; (8000be0 <print_to_ter+0x2ac>)
 8000ab8:	4842      	ldr	r0, [pc, #264]	; (8000bc4 <print_to_ter+0x290>)
 8000aba:	f001 fecd 	bl	8002858 <siprintf>
 8000abe:	4602      	mov	r2, r0
 8000ac0:	4b42      	ldr	r3, [pc, #264]	; (8000bcc <print_to_ter+0x298>)
 8000ac2:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *) buf, buf_len, 100);
 8000ac4:	4b41      	ldr	r3, [pc, #260]	; (8000bcc <print_to_ter+0x298>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	b29a      	uxth	r2, r3
 8000aca:	2364      	movs	r3, #100	; 0x64
 8000acc:	493d      	ldr	r1, [pc, #244]	; (8000bc4 <print_to_ter+0x290>)
 8000ace:	4841      	ldr	r0, [pc, #260]	; (8000bd4 <print_to_ter+0x2a0>)
 8000ad0:	f001 fd25 	bl	800251e <HAL_UART_Transmit>
			BL = true;
 8000ad4:	4b40      	ldr	r3, [pc, #256]	; (8000bd8 <print_to_ter+0x2a4>)
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	701a      	strb	r2, [r3, #0]
		break;
 8000ada:	e06d      	b.n	8000bb8 <print_to_ter+0x284>
	case 3:
		if(BL){
 8000adc:	4b3e      	ldr	r3, [pc, #248]	; (8000bd8 <print_to_ter+0x2a4>)
 8000ade:	781b      	ldrb	r3, [r3, #0]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	d024      	beq.n	8000b2e <print_to_ter+0x1fa>
			buf_len = sprintf(buf, "\033[2J]	");
 8000ae4:	4b37      	ldr	r3, [pc, #220]	; (8000bc4 <print_to_ter+0x290>)
 8000ae6:	4a38      	ldr	r2, [pc, #224]	; (8000bc8 <print_to_ter+0x294>)
 8000ae8:	6810      	ldr	r0, [r2, #0]
 8000aea:	6018      	str	r0, [r3, #0]
 8000aec:	8891      	ldrh	r1, [r2, #4]
 8000aee:	7992      	ldrb	r2, [r2, #6]
 8000af0:	8099      	strh	r1, [r3, #4]
 8000af2:	719a      	strb	r2, [r3, #6]
 8000af4:	2206      	movs	r2, #6
 8000af6:	4b35      	ldr	r3, [pc, #212]	; (8000bcc <print_to_ter+0x298>)
 8000af8:	601a      	str	r2, [r3, #0]
			buf_len = sprintf(buf, "mode%u %u:%u:%u      \r",mode,d,c,b);
 8000afa:	4b31      	ldr	r3, [pc, #196]	; (8000bc0 <print_to_ter+0x28c>)
 8000afc:	681a      	ldr	r2, [r3, #0]
 8000afe:	68bb      	ldr	r3, [r7, #8]
 8000b00:	9301      	str	r3, [sp, #4]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	9300      	str	r3, [sp, #0]
 8000b06:	683b      	ldr	r3, [r7, #0]
 8000b08:	4931      	ldr	r1, [pc, #196]	; (8000bd0 <print_to_ter+0x29c>)
 8000b0a:	482e      	ldr	r0, [pc, #184]	; (8000bc4 <print_to_ter+0x290>)
 8000b0c:	f001 fea4 	bl	8002858 <siprintf>
 8000b10:	4602      	mov	r2, r0
 8000b12:	4b2e      	ldr	r3, [pc, #184]	; (8000bcc <print_to_ter+0x298>)
 8000b14:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *) buf, buf_len, 100);
 8000b16:	4b2d      	ldr	r3, [pc, #180]	; (8000bcc <print_to_ter+0x298>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	b29a      	uxth	r2, r3
 8000b1c:	2364      	movs	r3, #100	; 0x64
 8000b1e:	4929      	ldr	r1, [pc, #164]	; (8000bc4 <print_to_ter+0x290>)
 8000b20:	482c      	ldr	r0, [pc, #176]	; (8000bd4 <print_to_ter+0x2a0>)
 8000b22:	f001 fcfc 	bl	800251e <HAL_UART_Transmit>
			BL = false;
 8000b26:	4b2c      	ldr	r3, [pc, #176]	; (8000bd8 <print_to_ter+0x2a4>)
 8000b28:	2200      	movs	r2, #0
 8000b2a:	701a      	strb	r2, [r3, #0]
			buf_len = sprintf(buf, "\033[2J]	");
			buf_len = sprintf(buf, "mode%u %u:%u:       \r",mode,d,c);
			HAL_UART_Transmit(&huart2, (uint8_t *) buf, buf_len, 100);
			BL = true;
		}
		break;
 8000b2c:	e044      	b.n	8000bb8 <print_to_ter+0x284>
			buf_len = sprintf(buf, "\033[2J]	");
 8000b2e:	4b25      	ldr	r3, [pc, #148]	; (8000bc4 <print_to_ter+0x290>)
 8000b30:	4a25      	ldr	r2, [pc, #148]	; (8000bc8 <print_to_ter+0x294>)
 8000b32:	6810      	ldr	r0, [r2, #0]
 8000b34:	6018      	str	r0, [r3, #0]
 8000b36:	8891      	ldrh	r1, [r2, #4]
 8000b38:	7992      	ldrb	r2, [r2, #6]
 8000b3a:	8099      	strh	r1, [r3, #4]
 8000b3c:	719a      	strb	r2, [r3, #6]
 8000b3e:	2206      	movs	r2, #6
 8000b40:	4b22      	ldr	r3, [pc, #136]	; (8000bcc <print_to_ter+0x298>)
 8000b42:	601a      	str	r2, [r3, #0]
			buf_len = sprintf(buf, "mode%u %u:%u:       \r",mode,d,c);
 8000b44:	4b1e      	ldr	r3, [pc, #120]	; (8000bc0 <print_to_ter+0x28c>)
 8000b46:	681a      	ldr	r2, [r3, #0]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	9300      	str	r3, [sp, #0]
 8000b4c:	683b      	ldr	r3, [r7, #0]
 8000b4e:	4925      	ldr	r1, [pc, #148]	; (8000be4 <print_to_ter+0x2b0>)
 8000b50:	481c      	ldr	r0, [pc, #112]	; (8000bc4 <print_to_ter+0x290>)
 8000b52:	f001 fe81 	bl	8002858 <siprintf>
 8000b56:	4602      	mov	r2, r0
 8000b58:	4b1c      	ldr	r3, [pc, #112]	; (8000bcc <print_to_ter+0x298>)
 8000b5a:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *) buf, buf_len, 100);
 8000b5c:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <print_to_ter+0x298>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	b29a      	uxth	r2, r3
 8000b62:	2364      	movs	r3, #100	; 0x64
 8000b64:	4917      	ldr	r1, [pc, #92]	; (8000bc4 <print_to_ter+0x290>)
 8000b66:	481b      	ldr	r0, [pc, #108]	; (8000bd4 <print_to_ter+0x2a0>)
 8000b68:	f001 fcd9 	bl	800251e <HAL_UART_Transmit>
			BL = true;
 8000b6c:	4b1a      	ldr	r3, [pc, #104]	; (8000bd8 <print_to_ter+0x2a4>)
 8000b6e:	2201      	movs	r2, #1
 8000b70:	701a      	strb	r2, [r3, #0]
		break;
 8000b72:	e021      	b.n	8000bb8 <print_to_ter+0x284>
	case 4:
			buf_len = sprintf(buf, "\033[2J]	");
 8000b74:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <print_to_ter+0x290>)
 8000b76:	4a14      	ldr	r2, [pc, #80]	; (8000bc8 <print_to_ter+0x294>)
 8000b78:	6810      	ldr	r0, [r2, #0]
 8000b7a:	6018      	str	r0, [r3, #0]
 8000b7c:	8891      	ldrh	r1, [r2, #4]
 8000b7e:	7992      	ldrb	r2, [r2, #6]
 8000b80:	8099      	strh	r1, [r3, #4]
 8000b82:	719a      	strb	r2, [r3, #6]
 8000b84:	2206      	movs	r2, #6
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <print_to_ter+0x298>)
 8000b88:	601a      	str	r2, [r3, #0]
			buf_len = sprintf(buf, "mode%u %u:%u:%u      \r",mode,c,b,a);
 8000b8a:	4b0d      	ldr	r3, [pc, #52]	; (8000bc0 <print_to_ter+0x28c>)
 8000b8c:	681a      	ldr	r2, [r3, #0]
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	9301      	str	r3, [sp, #4]
 8000b92:	68bb      	ldr	r3, [r7, #8]
 8000b94:	9300      	str	r3, [sp, #0]
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	490d      	ldr	r1, [pc, #52]	; (8000bd0 <print_to_ter+0x29c>)
 8000b9a:	480a      	ldr	r0, [pc, #40]	; (8000bc4 <print_to_ter+0x290>)
 8000b9c:	f001 fe5c 	bl	8002858 <siprintf>
 8000ba0:	4602      	mov	r2, r0
 8000ba2:	4b0a      	ldr	r3, [pc, #40]	; (8000bcc <print_to_ter+0x298>)
 8000ba4:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart2, (uint8_t *) buf, buf_len, 100);
 8000ba6:	4b09      	ldr	r3, [pc, #36]	; (8000bcc <print_to_ter+0x298>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	b29a      	uxth	r2, r3
 8000bac:	2364      	movs	r3, #100	; 0x64
 8000bae:	4905      	ldr	r1, [pc, #20]	; (8000bc4 <print_to_ter+0x290>)
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <print_to_ter+0x2a0>)
 8000bb2:	f001 fcb4 	bl	800251e <HAL_UART_Transmit>
			break;
 8000bb6:	bf00      	nop
	}


}
 8000bb8:	bf00      	nop
 8000bba:	3710      	adds	r7, #16
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	200000b4 	.word	0x200000b4
 8000bc4:	2000011c 	.word	0x2000011c
 8000bc8:	08003094 	.word	0x08003094
 8000bcc:	20000000 	.word	0x20000000
 8000bd0:	0800309c 	.word	0x0800309c
 8000bd4:	20000150 	.word	0x20000150
 8000bd8:	20000006 	.word	0x20000006
 8000bdc:	080030b4 	.word	0x080030b4
 8000be0:	080030cc 	.word	0x080030cc
 8000be4:	080030e4 	.word	0x080030e4

08000be8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc80      	pop	{r7}
 8000bf2:	4770      	bx	lr

08000bf4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bf4:	b480      	push	{r7}
 8000bf6:	b085      	sub	sp, #20
 8000bf8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000bfa:	4b15      	ldr	r3, [pc, #84]	; (8000c50 <HAL_MspInit+0x5c>)
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	4a14      	ldr	r2, [pc, #80]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c00:	f043 0301 	orr.w	r3, r3, #1
 8000c04:	6193      	str	r3, [r2, #24]
 8000c06:	4b12      	ldr	r3, [pc, #72]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f003 0301 	and.w	r3, r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
 8000c10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c12:	4b0f      	ldr	r3, [pc, #60]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c14:	69db      	ldr	r3, [r3, #28]
 8000c16:	4a0e      	ldr	r2, [pc, #56]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c1c:	61d3      	str	r3, [r2, #28]
 8000c1e:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <HAL_MspInit+0x5c>)
 8000c20:	69db      	ldr	r3, [r3, #28]
 8000c22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c26:	607b      	str	r3, [r7, #4]
 8000c28:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000c2a:	4b0a      	ldr	r3, [pc, #40]	; (8000c54 <HAL_MspInit+0x60>)
 8000c2c:	685b      	ldr	r3, [r3, #4]
 8000c2e:	60fb      	str	r3, [r7, #12]
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
 8000c3a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000c3e:	60fb      	str	r3, [r7, #12]
 8000c40:	4a04      	ldr	r2, [pc, #16]	; (8000c54 <HAL_MspInit+0x60>)
 8000c42:	68fb      	ldr	r3, [r7, #12]
 8000c44:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c46:	bf00      	nop
 8000c48:	3714      	adds	r7, #20
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr
 8000c50:	40021000 	.word	0x40021000
 8000c54:	40010000 	.word	0x40010000

08000c58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	681b      	ldr	r3, [r3, #0]
 8000c64:	4a0d      	ldr	r2, [pc, #52]	; (8000c9c <HAL_TIM_Base_MspInit+0x44>)
 8000c66:	4293      	cmp	r3, r2
 8000c68:	d113      	bne.n	8000c92 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c6a:	4b0d      	ldr	r3, [pc, #52]	; (8000ca0 <HAL_TIM_Base_MspInit+0x48>)
 8000c6c:	69db      	ldr	r3, [r3, #28]
 8000c6e:	4a0c      	ldr	r2, [pc, #48]	; (8000ca0 <HAL_TIM_Base_MspInit+0x48>)
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	61d3      	str	r3, [r2, #28]
 8000c76:	4b0a      	ldr	r3, [pc, #40]	; (8000ca0 <HAL_TIM_Base_MspInit+0x48>)
 8000c78:	69db      	ldr	r3, [r3, #28]
 8000c7a:	f003 0302 	and.w	r3, r3, #2
 8000c7e:	60fb      	str	r3, [r7, #12]
 8000c80:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000c82:	2200      	movs	r2, #0
 8000c84:	2100      	movs	r1, #0
 8000c86:	201d      	movs	r0, #29
 8000c88:	f000 fa19 	bl	80010be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000c8c:	201d      	movs	r0, #29
 8000c8e:	f000 fa32 	bl	80010f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c92:	bf00      	nop
 8000c94:	3710      	adds	r7, #16
 8000c96:	46bd      	mov	sp, r7
 8000c98:	bd80      	pop	{r7, pc}
 8000c9a:	bf00      	nop
 8000c9c:	40000400 	.word	0x40000400
 8000ca0:	40021000 	.word	0x40021000

08000ca4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b088      	sub	sp, #32
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cac:	f107 0310 	add.w	r3, r7, #16
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a15      	ldr	r2, [pc, #84]	; (8000d14 <HAL_UART_MspInit+0x70>)
 8000cc0:	4293      	cmp	r3, r2
 8000cc2:	d123      	bne.n	8000d0c <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000cc4:	4b14      	ldr	r3, [pc, #80]	; (8000d18 <HAL_UART_MspInit+0x74>)
 8000cc6:	69db      	ldr	r3, [r3, #28]
 8000cc8:	4a13      	ldr	r2, [pc, #76]	; (8000d18 <HAL_UART_MspInit+0x74>)
 8000cca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cce:	61d3      	str	r3, [r2, #28]
 8000cd0:	4b11      	ldr	r3, [pc, #68]	; (8000d18 <HAL_UART_MspInit+0x74>)
 8000cd2:	69db      	ldr	r3, [r3, #28]
 8000cd4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cd8:	60fb      	str	r3, [r7, #12]
 8000cda:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cdc:	4b0e      	ldr	r3, [pc, #56]	; (8000d18 <HAL_UART_MspInit+0x74>)
 8000cde:	699b      	ldr	r3, [r3, #24]
 8000ce0:	4a0d      	ldr	r2, [pc, #52]	; (8000d18 <HAL_UART_MspInit+0x74>)
 8000ce2:	f043 0304 	orr.w	r3, r3, #4
 8000ce6:	6193      	str	r3, [r2, #24]
 8000ce8:	4b0b      	ldr	r3, [pc, #44]	; (8000d18 <HAL_UART_MspInit+0x74>)
 8000cea:	699b      	ldr	r3, [r3, #24]
 8000cec:	f003 0304 	and.w	r3, r3, #4
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000cf4:	230c      	movs	r3, #12
 8000cf6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf8:	2302      	movs	r3, #2
 8000cfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	f107 0310 	add.w	r3, r7, #16
 8000d04:	4619      	mov	r1, r3
 8000d06:	4805      	ldr	r0, [pc, #20]	; (8000d1c <HAL_UART_MspInit+0x78>)
 8000d08:	f000 fa10 	bl	800112c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d0c:	bf00      	nop
 8000d0e:	3720      	adds	r7, #32
 8000d10:	46bd      	mov	sp, r7
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40004400 	.word	0x40004400
 8000d18:	40021000 	.word	0x40021000
 8000d1c:	40010800 	.word	0x40010800

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d24:	bf00      	nop
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bc80      	pop	{r7}
 8000d2a:	4770      	bx	lr

08000d2c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d30:	e7fe      	b.n	8000d30 <HardFault_Handler+0x4>

08000d32 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d32:	b480      	push	{r7}
 8000d34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d36:	e7fe      	b.n	8000d36 <MemManage_Handler+0x4>

08000d38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3c:	e7fe      	b.n	8000d3c <BusFault_Handler+0x4>

08000d3e <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d42:	e7fe      	b.n	8000d42 <UsageFault_Handler+0x4>

08000d44 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	bc80      	pop	{r7}
 8000d4e:	4770      	bx	lr

08000d50 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d50:	b480      	push	{r7}
 8000d52:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d54:	bf00      	nop
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bc80      	pop	{r7}
 8000d5a:	4770      	bx	lr

08000d5c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d6c:	f000 f8b4 	bl	8000ed8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d70:	bf00      	nop
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d78:	4802      	ldr	r0, [pc, #8]	; (8000d84 <TIM3_IRQHandler+0x10>)
 8000d7a:	f001 f837 	bl	8001dec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	200000d4 	.word	0x200000d4

08000d88 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b086      	sub	sp, #24
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d90:	4a14      	ldr	r2, [pc, #80]	; (8000de4 <_sbrk+0x5c>)
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <_sbrk+0x60>)
 8000d94:	1ad3      	subs	r3, r2, r3
 8000d96:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d9c:	4b13      	ldr	r3, [pc, #76]	; (8000dec <_sbrk+0x64>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d102      	bne.n	8000daa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000da4:	4b11      	ldr	r3, [pc, #68]	; (8000dec <_sbrk+0x64>)
 8000da6:	4a12      	ldr	r2, [pc, #72]	; (8000df0 <_sbrk+0x68>)
 8000da8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000daa:	4b10      	ldr	r3, [pc, #64]	; (8000dec <_sbrk+0x64>)
 8000dac:	681a      	ldr	r2, [r3, #0]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	4413      	add	r3, r2
 8000db2:	693a      	ldr	r2, [r7, #16]
 8000db4:	429a      	cmp	r2, r3
 8000db6:	d207      	bcs.n	8000dc8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000db8:	f001 fd1c 	bl	80027f4 <__errno>
 8000dbc:	4602      	mov	r2, r0
 8000dbe:	230c      	movs	r3, #12
 8000dc0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000dc2:	f04f 33ff 	mov.w	r3, #4294967295
 8000dc6:	e009      	b.n	8000ddc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000dc8:	4b08      	ldr	r3, [pc, #32]	; (8000dec <_sbrk+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dce:	4b07      	ldr	r3, [pc, #28]	; (8000dec <_sbrk+0x64>)
 8000dd0:	681a      	ldr	r2, [r3, #0]
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <_sbrk+0x64>)
 8000dd8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dda:	68fb      	ldr	r3, [r7, #12]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	3718      	adds	r7, #24
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}
 8000de4:	20005000 	.word	0x20005000
 8000de8:	00000400 	.word	0x00000400
 8000dec:	200000c0 	.word	0x200000c0
 8000df0:	20000198 	.word	0x20000198

08000df4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000df4:	b480      	push	{r7}
 8000df6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df8:	bf00      	nop
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bc80      	pop	{r7}
 8000dfe:	4770      	bx	lr

08000e00 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e00:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e02:	e003      	b.n	8000e0c <LoopCopyDataInit>

08000e04 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e04:	4b0b      	ldr	r3, [pc, #44]	; (8000e34 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 8000e06:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000e08:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000e0a:	3104      	adds	r1, #4

08000e0c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000e0c:	480a      	ldr	r0, [pc, #40]	; (8000e38 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 8000e0e:	4b0b      	ldr	r3, [pc, #44]	; (8000e3c <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 8000e10:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000e12:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000e14:	d3f6      	bcc.n	8000e04 <CopyDataInit>
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	; (8000e40 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 8000e18:	e002      	b.n	8000e20 <LoopFillZerobss>

08000e1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  str r3, [r2], #4
 8000e1c:	f842 3b04 	str.w	r3, [r2], #4

08000e20 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 8000e20:	4b08      	ldr	r3, [pc, #32]	; (8000e44 <LoopFillZerobss+0x24>)
  cmp r2, r3
 8000e22:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000e24:	d3f9      	bcc.n	8000e1a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8000e26:	f7ff ffe5 	bl	8000df4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e2a:	f001 fce9 	bl	8002800 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000e2e:	f7ff f98d 	bl	800014c <main>
  bx lr
 8000e32:	4770      	bx	lr
  ldr r3, =_sidata
 8000e34:	08003164 	.word	0x08003164
  ldr r0, =_sdata
 8000e38:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000e3c:	20000078 	.word	0x20000078
  ldr r2, =_sbss
 8000e40:	20000078 	.word	0x20000078
  ldr r3, = _ebss
 8000e44:	20000198 	.word	0x20000198

08000e48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC1_2_IRQHandler>
	...

08000e4c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e50:	4b08      	ldr	r3, [pc, #32]	; (8000e74 <HAL_Init+0x28>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	4a07      	ldr	r2, [pc, #28]	; (8000e74 <HAL_Init+0x28>)
 8000e56:	f043 0310 	orr.w	r3, r3, #16
 8000e5a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e5c:	2003      	movs	r0, #3
 8000e5e:	f000 f923 	bl	80010a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e62:	2000      	movs	r0, #0
 8000e64:	f000 f808 	bl	8000e78 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e68:	f7ff fec4 	bl	8000bf4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e6c:	2300      	movs	r3, #0
}
 8000e6e:	4618      	mov	r0, r3
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	40022000 	.word	0x40022000

08000e78 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e80:	4b12      	ldr	r3, [pc, #72]	; (8000ecc <HAL_InitTick+0x54>)
 8000e82:	681a      	ldr	r2, [r3, #0]
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <HAL_InitTick+0x58>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e8e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e96:	4618      	mov	r0, r3
 8000e98:	f000 f93b 	bl	8001112 <HAL_SYSTICK_Config>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	e00e      	b.n	8000ec4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	2b0f      	cmp	r3, #15
 8000eaa:	d80a      	bhi.n	8000ec2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eac:	2200      	movs	r2, #0
 8000eae:	6879      	ldr	r1, [r7, #4]
 8000eb0:	f04f 30ff 	mov.w	r0, #4294967295
 8000eb4:	f000 f903 	bl	80010be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000eb8:	4a06      	ldr	r2, [pc, #24]	; (8000ed4 <HAL_InitTick+0x5c>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	e000      	b.n	8000ec4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
}
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	3708      	adds	r7, #8
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	bd80      	pop	{r7, pc}
 8000ecc:	20000008 	.word	0x20000008
 8000ed0:	20000010 	.word	0x20000010
 8000ed4:	2000000c 	.word	0x2000000c

08000ed8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <HAL_IncTick+0x1c>)
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	461a      	mov	r2, r3
 8000ee2:	4b05      	ldr	r3, [pc, #20]	; (8000ef8 <HAL_IncTick+0x20>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	4413      	add	r3, r2
 8000ee8:	4a03      	ldr	r2, [pc, #12]	; (8000ef8 <HAL_IncTick+0x20>)
 8000eea:	6013      	str	r3, [r2, #0]
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bc80      	pop	{r7}
 8000ef2:	4770      	bx	lr
 8000ef4:	20000010 	.word	0x20000010
 8000ef8:	20000190 	.word	0x20000190

08000efc <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000efc:	b480      	push	{r7}
 8000efe:	af00      	add	r7, sp, #0
  return uwTick;
 8000f00:	4b02      	ldr	r3, [pc, #8]	; (8000f0c <HAL_GetTick+0x10>)
 8000f02:	681b      	ldr	r3, [r3, #0]
}
 8000f04:	4618      	mov	r0, r3
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bc80      	pop	{r7}
 8000f0a:	4770      	bx	lr
 8000f0c:	20000190 	.word	0x20000190

08000f10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b085      	sub	sp, #20
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	f003 0307 	and.w	r3, r3, #7
 8000f1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f20:	4b0c      	ldr	r3, [pc, #48]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f22:	68db      	ldr	r3, [r3, #12]
 8000f24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f26:	68ba      	ldr	r2, [r7, #8]
 8000f28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f34:	68bb      	ldr	r3, [r7, #8]
 8000f36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f42:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <__NVIC_SetPriorityGrouping+0x44>)
 8000f44:	68bb      	ldr	r3, [r7, #8]
 8000f46:	60d3      	str	r3, [r2, #12]
}
 8000f48:	bf00      	nop
 8000f4a:	3714      	adds	r7, #20
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bc80      	pop	{r7}
 8000f50:	4770      	bx	lr
 8000f52:	bf00      	nop
 8000f54:	e000ed00 	.word	0xe000ed00

08000f58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <__NVIC_GetPriorityGrouping+0x18>)
 8000f5e:	68db      	ldr	r3, [r3, #12]
 8000f60:	0a1b      	lsrs	r3, r3, #8
 8000f62:	f003 0307 	and.w	r3, r3, #7
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bc80      	pop	{r7}
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	db0b      	blt.n	8000f9e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	f003 021f 	and.w	r2, r3, #31
 8000f8c:	4906      	ldr	r1, [pc, #24]	; (8000fa8 <__NVIC_EnableIRQ+0x34>)
 8000f8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f92:	095b      	lsrs	r3, r3, #5
 8000f94:	2001      	movs	r0, #1
 8000f96:	fa00 f202 	lsl.w	r2, r0, r2
 8000f9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f9e:	bf00      	nop
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	e000e100 	.word	0xe000e100

08000fac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b083      	sub	sp, #12
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	6039      	str	r1, [r7, #0]
 8000fb6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fb8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	db0a      	blt.n	8000fd6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fc0:	683b      	ldr	r3, [r7, #0]
 8000fc2:	b2da      	uxtb	r2, r3
 8000fc4:	490c      	ldr	r1, [pc, #48]	; (8000ff8 <__NVIC_SetPriority+0x4c>)
 8000fc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fca:	0112      	lsls	r2, r2, #4
 8000fcc:	b2d2      	uxtb	r2, r2
 8000fce:	440b      	add	r3, r1
 8000fd0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000fd4:	e00a      	b.n	8000fec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	b2da      	uxtb	r2, r3
 8000fda:	4908      	ldr	r1, [pc, #32]	; (8000ffc <__NVIC_SetPriority+0x50>)
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	f003 030f 	and.w	r3, r3, #15
 8000fe2:	3b04      	subs	r3, #4
 8000fe4:	0112      	lsls	r2, r2, #4
 8000fe6:	b2d2      	uxtb	r2, r2
 8000fe8:	440b      	add	r3, r1
 8000fea:	761a      	strb	r2, [r3, #24]
}
 8000fec:	bf00      	nop
 8000fee:	370c      	adds	r7, #12
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bc80      	pop	{r7}
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop
 8000ff8:	e000e100 	.word	0xe000e100
 8000ffc:	e000ed00 	.word	0xe000ed00

08001000 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001000:	b480      	push	{r7}
 8001002:	b089      	sub	sp, #36	; 0x24
 8001004:	af00      	add	r7, sp, #0
 8001006:	60f8      	str	r0, [r7, #12]
 8001008:	60b9      	str	r1, [r7, #8]
 800100a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 0307 	and.w	r3, r3, #7
 8001012:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	f1c3 0307 	rsb	r3, r3, #7
 800101a:	2b04      	cmp	r3, #4
 800101c:	bf28      	it	cs
 800101e:	2304      	movcs	r3, #4
 8001020:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	3304      	adds	r3, #4
 8001026:	2b06      	cmp	r3, #6
 8001028:	d902      	bls.n	8001030 <NVIC_EncodePriority+0x30>
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	3b03      	subs	r3, #3
 800102e:	e000      	b.n	8001032 <NVIC_EncodePriority+0x32>
 8001030:	2300      	movs	r3, #0
 8001032:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001034:	f04f 32ff 	mov.w	r2, #4294967295
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43da      	mvns	r2, r3
 8001040:	68bb      	ldr	r3, [r7, #8]
 8001042:	401a      	ands	r2, r3
 8001044:	697b      	ldr	r3, [r7, #20]
 8001046:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001048:	f04f 31ff 	mov.w	r1, #4294967295
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	fa01 f303 	lsl.w	r3, r1, r3
 8001052:	43d9      	mvns	r1, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001058:	4313      	orrs	r3, r2
         );
}
 800105a:	4618      	mov	r0, r3
 800105c:	3724      	adds	r7, #36	; 0x24
 800105e:	46bd      	mov	sp, r7
 8001060:	bc80      	pop	{r7}
 8001062:	4770      	bx	lr

08001064 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3b01      	subs	r3, #1
 8001070:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001074:	d301      	bcc.n	800107a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001076:	2301      	movs	r3, #1
 8001078:	e00f      	b.n	800109a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800107a:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <SysTick_Config+0x40>)
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	3b01      	subs	r3, #1
 8001080:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001082:	210f      	movs	r1, #15
 8001084:	f04f 30ff 	mov.w	r0, #4294967295
 8001088:	f7ff ff90 	bl	8000fac <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800108c:	4b05      	ldr	r3, [pc, #20]	; (80010a4 <SysTick_Config+0x40>)
 800108e:	2200      	movs	r2, #0
 8001090:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001092:	4b04      	ldr	r3, [pc, #16]	; (80010a4 <SysTick_Config+0x40>)
 8001094:	2207      	movs	r2, #7
 8001096:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001098:	2300      	movs	r3, #0
}
 800109a:	4618      	mov	r0, r3
 800109c:	3708      	adds	r7, #8
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}
 80010a2:	bf00      	nop
 80010a4:	e000e010 	.word	0xe000e010

080010a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ff2d 	bl	8000f10 <__NVIC_SetPriorityGrouping>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010be:	b580      	push	{r7, lr}
 80010c0:	b086      	sub	sp, #24
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	4603      	mov	r3, r0
 80010c6:	60b9      	str	r1, [r7, #8]
 80010c8:	607a      	str	r2, [r7, #4]
 80010ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010cc:	2300      	movs	r3, #0
 80010ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010d0:	f7ff ff42 	bl	8000f58 <__NVIC_GetPriorityGrouping>
 80010d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010d6:	687a      	ldr	r2, [r7, #4]
 80010d8:	68b9      	ldr	r1, [r7, #8]
 80010da:	6978      	ldr	r0, [r7, #20]
 80010dc:	f7ff ff90 	bl	8001000 <NVIC_EncodePriority>
 80010e0:	4602      	mov	r2, r0
 80010e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80010e6:	4611      	mov	r1, r2
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff5f 	bl	8000fac <__NVIC_SetPriority>
}
 80010ee:	bf00      	nop
 80010f0:	3718      	adds	r7, #24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b082      	sub	sp, #8
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001100:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001104:	4618      	mov	r0, r3
 8001106:	f7ff ff35 	bl	8000f74 <__NVIC_EnableIRQ>
}
 800110a:	bf00      	nop
 800110c:	3708      	adds	r7, #8
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}

08001112 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001112:	b580      	push	{r7, lr}
 8001114:	b082      	sub	sp, #8
 8001116:	af00      	add	r7, sp, #0
 8001118:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800111a:	6878      	ldr	r0, [r7, #4]
 800111c:	f7ff ffa2 	bl	8001064 <SysTick_Config>
 8001120:	4603      	mov	r3, r0
}
 8001122:	4618      	mov	r0, r3
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800112c:	b480      	push	{r7}
 800112e:	b08b      	sub	sp, #44	; 0x2c
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
 8001134:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001136:	2300      	movs	r3, #0
 8001138:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800113a:	2300      	movs	r3, #0
 800113c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800113e:	e127      	b.n	8001390 <HAL_GPIO_Init+0x264>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001140:	2201      	movs	r2, #1
 8001142:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	69fa      	ldr	r2, [r7, #28]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001154:	69ba      	ldr	r2, [r7, #24]
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	429a      	cmp	r2, r3
 800115a:	f040 8116 	bne.w	800138a <HAL_GPIO_Init+0x25e>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800115e:	683b      	ldr	r3, [r7, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	2b12      	cmp	r3, #18
 8001164:	d034      	beq.n	80011d0 <HAL_GPIO_Init+0xa4>
 8001166:	2b12      	cmp	r3, #18
 8001168:	d80d      	bhi.n	8001186 <HAL_GPIO_Init+0x5a>
 800116a:	2b02      	cmp	r3, #2
 800116c:	d02b      	beq.n	80011c6 <HAL_GPIO_Init+0x9a>
 800116e:	2b02      	cmp	r3, #2
 8001170:	d804      	bhi.n	800117c <HAL_GPIO_Init+0x50>
 8001172:	2b00      	cmp	r3, #0
 8001174:	d031      	beq.n	80011da <HAL_GPIO_Init+0xae>
 8001176:	2b01      	cmp	r3, #1
 8001178:	d01c      	beq.n	80011b4 <HAL_GPIO_Init+0x88>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800117a:	e048      	b.n	800120e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 800117c:	2b03      	cmp	r3, #3
 800117e:	d043      	beq.n	8001208 <HAL_GPIO_Init+0xdc>
 8001180:	2b11      	cmp	r3, #17
 8001182:	d01b      	beq.n	80011bc <HAL_GPIO_Init+0x90>
          break;
 8001184:	e043      	b.n	800120e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 8001186:	4a89      	ldr	r2, [pc, #548]	; (80013ac <HAL_GPIO_Init+0x280>)
 8001188:	4293      	cmp	r3, r2
 800118a:	d026      	beq.n	80011da <HAL_GPIO_Init+0xae>
 800118c:	4a87      	ldr	r2, [pc, #540]	; (80013ac <HAL_GPIO_Init+0x280>)
 800118e:	4293      	cmp	r3, r2
 8001190:	d806      	bhi.n	80011a0 <HAL_GPIO_Init+0x74>
 8001192:	4a87      	ldr	r2, [pc, #540]	; (80013b0 <HAL_GPIO_Init+0x284>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d020      	beq.n	80011da <HAL_GPIO_Init+0xae>
 8001198:	4a86      	ldr	r2, [pc, #536]	; (80013b4 <HAL_GPIO_Init+0x288>)
 800119a:	4293      	cmp	r3, r2
 800119c:	d01d      	beq.n	80011da <HAL_GPIO_Init+0xae>
          break;
 800119e:	e036      	b.n	800120e <HAL_GPIO_Init+0xe2>
      switch (GPIO_Init->Mode)
 80011a0:	4a85      	ldr	r2, [pc, #532]	; (80013b8 <HAL_GPIO_Init+0x28c>)
 80011a2:	4293      	cmp	r3, r2
 80011a4:	d019      	beq.n	80011da <HAL_GPIO_Init+0xae>
 80011a6:	4a85      	ldr	r2, [pc, #532]	; (80013bc <HAL_GPIO_Init+0x290>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d016      	beq.n	80011da <HAL_GPIO_Init+0xae>
 80011ac:	4a84      	ldr	r2, [pc, #528]	; (80013c0 <HAL_GPIO_Init+0x294>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d013      	beq.n	80011da <HAL_GPIO_Init+0xae>
          break;
 80011b2:	e02c      	b.n	800120e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	623b      	str	r3, [r7, #32]
          break;
 80011ba:	e028      	b.n	800120e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	68db      	ldr	r3, [r3, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	623b      	str	r3, [r7, #32]
          break;
 80011c4:	e023      	b.n	800120e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68db      	ldr	r3, [r3, #12]
 80011ca:	3308      	adds	r3, #8
 80011cc:	623b      	str	r3, [r7, #32]
          break;
 80011ce:	e01e      	b.n	800120e <HAL_GPIO_Init+0xe2>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011d0:	683b      	ldr	r3, [r7, #0]
 80011d2:	68db      	ldr	r3, [r3, #12]
 80011d4:	330c      	adds	r3, #12
 80011d6:	623b      	str	r3, [r7, #32]
          break;
 80011d8:	e019      	b.n	800120e <HAL_GPIO_Init+0xe2>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011da:	683b      	ldr	r3, [r7, #0]
 80011dc:	689b      	ldr	r3, [r3, #8]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d102      	bne.n	80011e8 <HAL_GPIO_Init+0xbc>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011e2:	2304      	movs	r3, #4
 80011e4:	623b      	str	r3, [r7, #32]
          break;
 80011e6:	e012      	b.n	800120e <HAL_GPIO_Init+0xe2>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e8:	683b      	ldr	r3, [r7, #0]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d105      	bne.n	80011fc <HAL_GPIO_Init+0xd0>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f0:	2308      	movs	r3, #8
 80011f2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	69fa      	ldr	r2, [r7, #28]
 80011f8:	611a      	str	r2, [r3, #16]
          break;
 80011fa:	e008      	b.n	800120e <HAL_GPIO_Init+0xe2>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011fc:	2308      	movs	r3, #8
 80011fe:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	69fa      	ldr	r2, [r7, #28]
 8001204:	615a      	str	r2, [r3, #20]
          break;
 8001206:	e002      	b.n	800120e <HAL_GPIO_Init+0xe2>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001208:	2300      	movs	r3, #0
 800120a:	623b      	str	r3, [r7, #32]
          break;
 800120c:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	2bff      	cmp	r3, #255	; 0xff
 8001212:	d801      	bhi.n	8001218 <HAL_GPIO_Init+0xec>
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	e001      	b.n	800121c <HAL_GPIO_Init+0xf0>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	3304      	adds	r3, #4
 800121c:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	2bff      	cmp	r3, #255	; 0xff
 8001222:	d802      	bhi.n	800122a <HAL_GPIO_Init+0xfe>
 8001224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001226:	009b      	lsls	r3, r3, #2
 8001228:	e002      	b.n	8001230 <HAL_GPIO_Init+0x104>
 800122a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800122c:	3b08      	subs	r3, #8
 800122e:	009b      	lsls	r3, r3, #2
 8001230:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	681a      	ldr	r2, [r3, #0]
 8001236:	210f      	movs	r1, #15
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	fa01 f303 	lsl.w	r3, r1, r3
 800123e:	43db      	mvns	r3, r3
 8001240:	401a      	ands	r2, r3
 8001242:	6a39      	ldr	r1, [r7, #32]
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	fa01 f303 	lsl.w	r3, r1, r3
 800124a:	431a      	orrs	r2, r3
 800124c:	697b      	ldr	r3, [r7, #20]
 800124e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001250:	683b      	ldr	r3, [r7, #0]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001258:	2b00      	cmp	r3, #0
 800125a:	f000 8096 	beq.w	800138a <HAL_GPIO_Init+0x25e>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800125e:	4b59      	ldr	r3, [pc, #356]	; (80013c4 <HAL_GPIO_Init+0x298>)
 8001260:	699b      	ldr	r3, [r3, #24]
 8001262:	4a58      	ldr	r2, [pc, #352]	; (80013c4 <HAL_GPIO_Init+0x298>)
 8001264:	f043 0301 	orr.w	r3, r3, #1
 8001268:	6193      	str	r3, [r2, #24]
 800126a:	4b56      	ldr	r3, [pc, #344]	; (80013c4 <HAL_GPIO_Init+0x298>)
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001276:	4a54      	ldr	r2, [pc, #336]	; (80013c8 <HAL_GPIO_Init+0x29c>)
 8001278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800127a:	089b      	lsrs	r3, r3, #2
 800127c:	3302      	adds	r3, #2
 800127e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001282:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001286:	f003 0303 	and.w	r3, r3, #3
 800128a:	009b      	lsls	r3, r3, #2
 800128c:	220f      	movs	r2, #15
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43db      	mvns	r3, r3
 8001294:	68fa      	ldr	r2, [r7, #12]
 8001296:	4013      	ands	r3, r2
 8001298:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4a4b      	ldr	r2, [pc, #300]	; (80013cc <HAL_GPIO_Init+0x2a0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d013      	beq.n	80012ca <HAL_GPIO_Init+0x19e>
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	4a4a      	ldr	r2, [pc, #296]	; (80013d0 <HAL_GPIO_Init+0x2a4>)
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d00d      	beq.n	80012c6 <HAL_GPIO_Init+0x19a>
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4a49      	ldr	r2, [pc, #292]	; (80013d4 <HAL_GPIO_Init+0x2a8>)
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d007      	beq.n	80012c2 <HAL_GPIO_Init+0x196>
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	4a48      	ldr	r2, [pc, #288]	; (80013d8 <HAL_GPIO_Init+0x2ac>)
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d101      	bne.n	80012be <HAL_GPIO_Init+0x192>
 80012ba:	2303      	movs	r3, #3
 80012bc:	e006      	b.n	80012cc <HAL_GPIO_Init+0x1a0>
 80012be:	2304      	movs	r3, #4
 80012c0:	e004      	b.n	80012cc <HAL_GPIO_Init+0x1a0>
 80012c2:	2302      	movs	r3, #2
 80012c4:	e002      	b.n	80012cc <HAL_GPIO_Init+0x1a0>
 80012c6:	2301      	movs	r3, #1
 80012c8:	e000      	b.n	80012cc <HAL_GPIO_Init+0x1a0>
 80012ca:	2300      	movs	r3, #0
 80012cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80012ce:	f002 0203 	and.w	r2, r2, #3
 80012d2:	0092      	lsls	r2, r2, #2
 80012d4:	4093      	lsls	r3, r2
 80012d6:	68fa      	ldr	r2, [r7, #12]
 80012d8:	4313      	orrs	r3, r2
 80012da:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012dc:	493a      	ldr	r1, [pc, #232]	; (80013c8 <HAL_GPIO_Init+0x29c>)
 80012de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e0:	089b      	lsrs	r3, r3, #2
 80012e2:	3302      	adds	r3, #2
 80012e4:	68fa      	ldr	r2, [r7, #12]
 80012e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	685b      	ldr	r3, [r3, #4]
 80012ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d006      	beq.n	8001304 <HAL_GPIO_Init+0x1d8>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80012f6:	4b39      	ldr	r3, [pc, #228]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 80012f8:	681a      	ldr	r2, [r3, #0]
 80012fa:	4938      	ldr	r1, [pc, #224]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	4313      	orrs	r3, r2
 8001300:	600b      	str	r3, [r1, #0]
 8001302:	e006      	b.n	8001312 <HAL_GPIO_Init+0x1e6>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001304:	4b35      	ldr	r3, [pc, #212]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001306:	681a      	ldr	r2, [r3, #0]
 8001308:	69bb      	ldr	r3, [r7, #24]
 800130a:	43db      	mvns	r3, r3
 800130c:	4933      	ldr	r1, [pc, #204]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 800130e:	4013      	ands	r3, r2
 8001310:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131a:	2b00      	cmp	r3, #0
 800131c:	d006      	beq.n	800132c <HAL_GPIO_Init+0x200>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 800131e:	4b2f      	ldr	r3, [pc, #188]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001320:	685a      	ldr	r2, [r3, #4]
 8001322:	492e      	ldr	r1, [pc, #184]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	4313      	orrs	r3, r2
 8001328:	604b      	str	r3, [r1, #4]
 800132a:	e006      	b.n	800133a <HAL_GPIO_Init+0x20e>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800132c:	4b2b      	ldr	r3, [pc, #172]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 800132e:	685a      	ldr	r2, [r3, #4]
 8001330:	69bb      	ldr	r3, [r7, #24]
 8001332:	43db      	mvns	r3, r3
 8001334:	4929      	ldr	r1, [pc, #164]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001336:	4013      	ands	r3, r2
 8001338:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d006      	beq.n	8001354 <HAL_GPIO_Init+0x228>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001346:	4b25      	ldr	r3, [pc, #148]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001348:	689a      	ldr	r2, [r3, #8]
 800134a:	4924      	ldr	r1, [pc, #144]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 800134c:	69bb      	ldr	r3, [r7, #24]
 800134e:	4313      	orrs	r3, r2
 8001350:	608b      	str	r3, [r1, #8]
 8001352:	e006      	b.n	8001362 <HAL_GPIO_Init+0x236>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001354:	4b21      	ldr	r3, [pc, #132]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001356:	689a      	ldr	r2, [r3, #8]
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	43db      	mvns	r3, r3
 800135c:	491f      	ldr	r1, [pc, #124]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 800135e:	4013      	ands	r3, r2
 8001360:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800136a:	2b00      	cmp	r3, #0
 800136c:	d006      	beq.n	800137c <HAL_GPIO_Init+0x250>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 800136e:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001370:	68da      	ldr	r2, [r3, #12]
 8001372:	491a      	ldr	r1, [pc, #104]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001374:	69bb      	ldr	r3, [r7, #24]
 8001376:	4313      	orrs	r3, r2
 8001378:	60cb      	str	r3, [r1, #12]
 800137a:	e006      	b.n	800138a <HAL_GPIO_Init+0x25e>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800137c:	4b17      	ldr	r3, [pc, #92]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 800137e:	68da      	ldr	r2, [r3, #12]
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	43db      	mvns	r3, r3
 8001384:	4915      	ldr	r1, [pc, #84]	; (80013dc <HAL_GPIO_Init+0x2b0>)
 8001386:	4013      	ands	r3, r2
 8001388:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 800138a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800138c:	3301      	adds	r3, #1
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	681a      	ldr	r2, [r3, #0]
 8001394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001396:	fa22 f303 	lsr.w	r3, r2, r3
 800139a:	2b00      	cmp	r3, #0
 800139c:	f47f aed0 	bne.w	8001140 <HAL_GPIO_Init+0x14>
  }
}
 80013a0:	bf00      	nop
 80013a2:	372c      	adds	r7, #44	; 0x2c
 80013a4:	46bd      	mov	sp, r7
 80013a6:	bc80      	pop	{r7}
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	10210000 	.word	0x10210000
 80013b0:	10110000 	.word	0x10110000
 80013b4:	10120000 	.word	0x10120000
 80013b8:	10310000 	.word	0x10310000
 80013bc:	10320000 	.word	0x10320000
 80013c0:	10220000 	.word	0x10220000
 80013c4:	40021000 	.word	0x40021000
 80013c8:	40010000 	.word	0x40010000
 80013cc:	40010800 	.word	0x40010800
 80013d0:	40010c00 	.word	0x40010c00
 80013d4:	40011000 	.word	0x40011000
 80013d8:	40011400 	.word	0x40011400
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b085      	sub	sp, #20
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	689a      	ldr	r2, [r3, #8]
 80013f0:	887b      	ldrh	r3, [r7, #2]
 80013f2:	4013      	ands	r3, r2
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d002      	beq.n	80013fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80013f8:	2301      	movs	r3, #1
 80013fa:	73fb      	strb	r3, [r7, #15]
 80013fc:	e001      	b.n	8001402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80013fe:	2300      	movs	r3, #0
 8001400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001402:	7bfb      	ldrb	r3, [r7, #15]
}
 8001404:	4618      	mov	r0, r3
 8001406:	3714      	adds	r7, #20
 8001408:	46bd      	mov	sp, r7
 800140a:	bc80      	pop	{r7}
 800140c:	4770      	bx	lr

0800140e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800140e:	b480      	push	{r7}
 8001410:	b083      	sub	sp, #12
 8001412:	af00      	add	r7, sp, #0
 8001414:	6078      	str	r0, [r7, #4]
 8001416:	460b      	mov	r3, r1
 8001418:	807b      	strh	r3, [r7, #2]
 800141a:	4613      	mov	r3, r2
 800141c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800141e:	787b      	ldrb	r3, [r7, #1]
 8001420:	2b00      	cmp	r3, #0
 8001422:	d003      	beq.n	800142c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001424:	887a      	ldrh	r2, [r7, #2]
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800142a:	e003      	b.n	8001434 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800142c:	887b      	ldrh	r3, [r7, #2]
 800142e:	041a      	lsls	r2, r3, #16
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	611a      	str	r2, [r3, #16]
}
 8001434:	bf00      	nop
 8001436:	370c      	adds	r7, #12
 8001438:	46bd      	mov	sp, r7
 800143a:	bc80      	pop	{r7}
 800143c:	4770      	bx	lr

0800143e <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800143e:	b480      	push	{r7}
 8001440:	b085      	sub	sp, #20
 8001442:	af00      	add	r7, sp, #0
 8001444:	6078      	str	r0, [r7, #4]
 8001446:	460b      	mov	r3, r1
 8001448:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	68db      	ldr	r3, [r3, #12]
 800144e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001450:	887a      	ldrh	r2, [r7, #2]
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	4013      	ands	r3, r2
 8001456:	041a      	lsls	r2, r3, #16
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43d9      	mvns	r1, r3
 800145c:	887b      	ldrh	r3, [r7, #2]
 800145e:	400b      	ands	r3, r1
 8001460:	431a      	orrs	r2, r3
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	611a      	str	r2, [r3, #16]
}
 8001466:	bf00      	nop
 8001468:	3714      	adds	r7, #20
 800146a:	46bd      	mov	sp, r7
 800146c:	bc80      	pop	{r7}
 800146e:	4770      	bx	lr

08001470 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d101      	bne.n	8001482 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800147e:	2301      	movs	r3, #1
 8001480:	e26c      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0301 	and.w	r3, r3, #1
 800148a:	2b00      	cmp	r3, #0
 800148c:	f000 8087 	beq.w	800159e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001490:	4b92      	ldr	r3, [pc, #584]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	f003 030c 	and.w	r3, r3, #12
 8001498:	2b04      	cmp	r3, #4
 800149a:	d00c      	beq.n	80014b6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800149c:	4b8f      	ldr	r3, [pc, #572]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	f003 030c 	and.w	r3, r3, #12
 80014a4:	2b08      	cmp	r3, #8
 80014a6:	d112      	bne.n	80014ce <HAL_RCC_OscConfig+0x5e>
 80014a8:	4b8c      	ldr	r3, [pc, #560]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014b4:	d10b      	bne.n	80014ce <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b6:	4b89      	ldr	r3, [pc, #548]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d06c      	beq.n	800159c <HAL_RCC_OscConfig+0x12c>
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d168      	bne.n	800159c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80014ca:	2301      	movs	r3, #1
 80014cc:	e246      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d6:	d106      	bne.n	80014e6 <HAL_RCC_OscConfig+0x76>
 80014d8:	4b80      	ldr	r3, [pc, #512]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a7f      	ldr	r2, [pc, #508]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e2:	6013      	str	r3, [r2, #0]
 80014e4:	e02e      	b.n	8001544 <HAL_RCC_OscConfig+0xd4>
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	685b      	ldr	r3, [r3, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d10c      	bne.n	8001508 <HAL_RCC_OscConfig+0x98>
 80014ee:	4b7b      	ldr	r3, [pc, #492]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	4a7a      	ldr	r2, [pc, #488]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014f8:	6013      	str	r3, [r2, #0]
 80014fa:	4b78      	ldr	r3, [pc, #480]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a77      	ldr	r2, [pc, #476]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001500:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001504:	6013      	str	r3, [r2, #0]
 8001506:	e01d      	b.n	8001544 <HAL_RCC_OscConfig+0xd4>
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001510:	d10c      	bne.n	800152c <HAL_RCC_OscConfig+0xbc>
 8001512:	4b72      	ldr	r3, [pc, #456]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	4a71      	ldr	r2, [pc, #452]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001518:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800151c:	6013      	str	r3, [r2, #0]
 800151e:	4b6f      	ldr	r3, [pc, #444]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	4a6e      	ldr	r2, [pc, #440]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001524:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001528:	6013      	str	r3, [r2, #0]
 800152a:	e00b      	b.n	8001544 <HAL_RCC_OscConfig+0xd4>
 800152c:	4b6b      	ldr	r3, [pc, #428]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	4a6a      	ldr	r2, [pc, #424]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001532:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001536:	6013      	str	r3, [r2, #0]
 8001538:	4b68      	ldr	r3, [pc, #416]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a67      	ldr	r2, [pc, #412]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 800153e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001542:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d013      	beq.n	8001574 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800154c:	f7ff fcd6 	bl	8000efc <HAL_GetTick>
 8001550:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001552:	e008      	b.n	8001566 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001554:	f7ff fcd2 	bl	8000efc <HAL_GetTick>
 8001558:	4602      	mov	r2, r0
 800155a:	693b      	ldr	r3, [r7, #16]
 800155c:	1ad3      	subs	r3, r2, r3
 800155e:	2b64      	cmp	r3, #100	; 0x64
 8001560:	d901      	bls.n	8001566 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001562:	2303      	movs	r3, #3
 8001564:	e1fa      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001566:	4b5d      	ldr	r3, [pc, #372]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d0f0      	beq.n	8001554 <HAL_RCC_OscConfig+0xe4>
 8001572:	e014      	b.n	800159e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001574:	f7ff fcc2 	bl	8000efc <HAL_GetTick>
 8001578:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800157a:	e008      	b.n	800158e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800157c:	f7ff fcbe 	bl	8000efc <HAL_GetTick>
 8001580:	4602      	mov	r2, r0
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	2b64      	cmp	r3, #100	; 0x64
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e1e6      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800158e:	4b53      	ldr	r3, [pc, #332]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001596:	2b00      	cmp	r3, #0
 8001598:	d1f0      	bne.n	800157c <HAL_RCC_OscConfig+0x10c>
 800159a:	e000      	b.n	800159e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800159c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d063      	beq.n	8001672 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80015aa:	4b4c      	ldr	r3, [pc, #304]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	f003 030c 	and.w	r3, r3, #12
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d00b      	beq.n	80015ce <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80015b6:	4b49      	ldr	r3, [pc, #292]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f003 030c 	and.w	r3, r3, #12
 80015be:	2b08      	cmp	r3, #8
 80015c0:	d11c      	bne.n	80015fc <HAL_RCC_OscConfig+0x18c>
 80015c2:	4b46      	ldr	r3, [pc, #280]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d116      	bne.n	80015fc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015ce:	4b43      	ldr	r3, [pc, #268]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 0302 	and.w	r3, r3, #2
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d005      	beq.n	80015e6 <HAL_RCC_OscConfig+0x176>
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	691b      	ldr	r3, [r3, #16]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	d001      	beq.n	80015e6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e1ba      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015e6:	4b3d      	ldr	r3, [pc, #244]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	695b      	ldr	r3, [r3, #20]
 80015f2:	00db      	lsls	r3, r3, #3
 80015f4:	4939      	ldr	r1, [pc, #228]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80015f6:	4313      	orrs	r3, r2
 80015f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015fa:	e03a      	b.n	8001672 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d020      	beq.n	8001646 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001604:	4b36      	ldr	r3, [pc, #216]	; (80016e0 <HAL_RCC_OscConfig+0x270>)
 8001606:	2201      	movs	r2, #1
 8001608:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800160a:	f7ff fc77 	bl	8000efc <HAL_GetTick>
 800160e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001612:	f7ff fc73 	bl	8000efc <HAL_GetTick>
 8001616:	4602      	mov	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b02      	cmp	r3, #2
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e19b      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001624:	4b2d      	ldr	r3, [pc, #180]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001630:	4b2a      	ldr	r3, [pc, #168]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	00db      	lsls	r3, r3, #3
 800163e:	4927      	ldr	r1, [pc, #156]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001640:	4313      	orrs	r3, r2
 8001642:	600b      	str	r3, [r1, #0]
 8001644:	e015      	b.n	8001672 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b26      	ldr	r3, [pc, #152]	; (80016e0 <HAL_RCC_OscConfig+0x270>)
 8001648:	2200      	movs	r2, #0
 800164a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800164c:	f7ff fc56 	bl	8000efc <HAL_GetTick>
 8001650:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001652:	e008      	b.n	8001666 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001654:	f7ff fc52 	bl	8000efc <HAL_GetTick>
 8001658:	4602      	mov	r2, r0
 800165a:	693b      	ldr	r3, [r7, #16]
 800165c:	1ad3      	subs	r3, r2, r3
 800165e:	2b02      	cmp	r3, #2
 8001660:	d901      	bls.n	8001666 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001662:	2303      	movs	r3, #3
 8001664:	e17a      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001666:	4b1d      	ldr	r3, [pc, #116]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f003 0302 	and.w	r3, r3, #2
 800166e:	2b00      	cmp	r3, #0
 8001670:	d1f0      	bne.n	8001654 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0308 	and.w	r3, r3, #8
 800167a:	2b00      	cmp	r3, #0
 800167c:	d03a      	beq.n	80016f4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	699b      	ldr	r3, [r3, #24]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d019      	beq.n	80016ba <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001686:	4b17      	ldr	r3, [pc, #92]	; (80016e4 <HAL_RCC_OscConfig+0x274>)
 8001688:	2201      	movs	r2, #1
 800168a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800168c:	f7ff fc36 	bl	8000efc <HAL_GetTick>
 8001690:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001692:	e008      	b.n	80016a6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001694:	f7ff fc32 	bl	8000efc <HAL_GetTick>
 8001698:	4602      	mov	r2, r0
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	2b02      	cmp	r3, #2
 80016a0:	d901      	bls.n	80016a6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80016a2:	2303      	movs	r3, #3
 80016a4:	e15a      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80016a6:	4b0d      	ldr	r3, [pc, #52]	; (80016dc <HAL_RCC_OscConfig+0x26c>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	f003 0302 	and.w	r3, r3, #2
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d0f0      	beq.n	8001694 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80016b2:	2001      	movs	r0, #1
 80016b4:	f000 fada 	bl	8001c6c <RCC_Delay>
 80016b8:	e01c      	b.n	80016f4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016ba:	4b0a      	ldr	r3, [pc, #40]	; (80016e4 <HAL_RCC_OscConfig+0x274>)
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016c0:	f7ff fc1c 	bl	8000efc <HAL_GetTick>
 80016c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016c6:	e00f      	b.n	80016e8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c8:	f7ff fc18 	bl	8000efc <HAL_GetTick>
 80016cc:	4602      	mov	r2, r0
 80016ce:	693b      	ldr	r3, [r7, #16]
 80016d0:	1ad3      	subs	r3, r2, r3
 80016d2:	2b02      	cmp	r3, #2
 80016d4:	d908      	bls.n	80016e8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80016d6:	2303      	movs	r3, #3
 80016d8:	e140      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	42420000 	.word	0x42420000
 80016e4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80016e8:	4b9e      	ldr	r3, [pc, #632]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 80016ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ec:	f003 0302 	and.w	r3, r3, #2
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e9      	bne.n	80016c8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	f000 80a6 	beq.w	800184e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001702:	2300      	movs	r3, #0
 8001704:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001706:	4b97      	ldr	r3, [pc, #604]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 8001708:	69db      	ldr	r3, [r3, #28]
 800170a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d10d      	bne.n	800172e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001712:	4b94      	ldr	r3, [pc, #592]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 8001714:	69db      	ldr	r3, [r3, #28]
 8001716:	4a93      	ldr	r2, [pc, #588]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 8001718:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800171c:	61d3      	str	r3, [r2, #28]
 800171e:	4b91      	ldr	r3, [pc, #580]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 8001720:	69db      	ldr	r3, [r3, #28]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800172a:	2301      	movs	r3, #1
 800172c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800172e:	4b8e      	ldr	r3, [pc, #568]	; (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001736:	2b00      	cmp	r3, #0
 8001738:	d118      	bne.n	800176c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800173a:	4b8b      	ldr	r3, [pc, #556]	; (8001968 <HAL_RCC_OscConfig+0x4f8>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a8a      	ldr	r2, [pc, #552]	; (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001740:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001744:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001746:	f7ff fbd9 	bl	8000efc <HAL_GetTick>
 800174a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800174c:	e008      	b.n	8001760 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800174e:	f7ff fbd5 	bl	8000efc <HAL_GetTick>
 8001752:	4602      	mov	r2, r0
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	1ad3      	subs	r3, r2, r3
 8001758:	2b64      	cmp	r3, #100	; 0x64
 800175a:	d901      	bls.n	8001760 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800175c:	2303      	movs	r3, #3
 800175e:	e0fd      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001760:	4b81      	ldr	r3, [pc, #516]	; (8001968 <HAL_RCC_OscConfig+0x4f8>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001768:	2b00      	cmp	r3, #0
 800176a:	d0f0      	beq.n	800174e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	68db      	ldr	r3, [r3, #12]
 8001770:	2b01      	cmp	r3, #1
 8001772:	d106      	bne.n	8001782 <HAL_RCC_OscConfig+0x312>
 8001774:	4b7b      	ldr	r3, [pc, #492]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 8001776:	6a1b      	ldr	r3, [r3, #32]
 8001778:	4a7a      	ldr	r2, [pc, #488]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 800177a:	f043 0301 	orr.w	r3, r3, #1
 800177e:	6213      	str	r3, [r2, #32]
 8001780:	e02d      	b.n	80017de <HAL_RCC_OscConfig+0x36e>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	68db      	ldr	r3, [r3, #12]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d10c      	bne.n	80017a4 <HAL_RCC_OscConfig+0x334>
 800178a:	4b76      	ldr	r3, [pc, #472]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 800178c:	6a1b      	ldr	r3, [r3, #32]
 800178e:	4a75      	ldr	r2, [pc, #468]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 8001790:	f023 0301 	bic.w	r3, r3, #1
 8001794:	6213      	str	r3, [r2, #32]
 8001796:	4b73      	ldr	r3, [pc, #460]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 8001798:	6a1b      	ldr	r3, [r3, #32]
 800179a:	4a72      	ldr	r2, [pc, #456]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 800179c:	f023 0304 	bic.w	r3, r3, #4
 80017a0:	6213      	str	r3, [r2, #32]
 80017a2:	e01c      	b.n	80017de <HAL_RCC_OscConfig+0x36e>
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	68db      	ldr	r3, [r3, #12]
 80017a8:	2b05      	cmp	r3, #5
 80017aa:	d10c      	bne.n	80017c6 <HAL_RCC_OscConfig+0x356>
 80017ac:	4b6d      	ldr	r3, [pc, #436]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 80017ae:	6a1b      	ldr	r3, [r3, #32]
 80017b0:	4a6c      	ldr	r2, [pc, #432]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 80017b2:	f043 0304 	orr.w	r3, r3, #4
 80017b6:	6213      	str	r3, [r2, #32]
 80017b8:	4b6a      	ldr	r3, [pc, #424]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4a69      	ldr	r2, [pc, #420]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 80017be:	f043 0301 	orr.w	r3, r3, #1
 80017c2:	6213      	str	r3, [r2, #32]
 80017c4:	e00b      	b.n	80017de <HAL_RCC_OscConfig+0x36e>
 80017c6:	4b67      	ldr	r3, [pc, #412]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 80017c8:	6a1b      	ldr	r3, [r3, #32]
 80017ca:	4a66      	ldr	r2, [pc, #408]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 80017cc:	f023 0301 	bic.w	r3, r3, #1
 80017d0:	6213      	str	r3, [r2, #32]
 80017d2:	4b64      	ldr	r3, [pc, #400]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 80017d4:	6a1b      	ldr	r3, [r3, #32]
 80017d6:	4a63      	ldr	r2, [pc, #396]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 80017d8:	f023 0304 	bic.w	r3, r3, #4
 80017dc:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d015      	beq.n	8001812 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017e6:	f7ff fb89 	bl	8000efc <HAL_GetTick>
 80017ea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017ec:	e00a      	b.n	8001804 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ee:	f7ff fb85 	bl	8000efc <HAL_GetTick>
 80017f2:	4602      	mov	r2, r0
 80017f4:	693b      	ldr	r3, [r7, #16]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017fc:	4293      	cmp	r3, r2
 80017fe:	d901      	bls.n	8001804 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001800:	2303      	movs	r3, #3
 8001802:	e0ab      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001804:	4b57      	ldr	r3, [pc, #348]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 8001806:	6a1b      	ldr	r3, [r3, #32]
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ee      	beq.n	80017ee <HAL_RCC_OscConfig+0x37e>
 8001810:	e014      	b.n	800183c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff fb73 	bl	8000efc <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001818:	e00a      	b.n	8001830 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800181a:	f7ff fb6f 	bl	8000efc <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	f241 3288 	movw	r2, #5000	; 0x1388
 8001828:	4293      	cmp	r3, r2
 800182a:	d901      	bls.n	8001830 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e095      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001830:	4b4c      	ldr	r3, [pc, #304]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 8001832:	6a1b      	ldr	r3, [r3, #32]
 8001834:	f003 0302 	and.w	r3, r3, #2
 8001838:	2b00      	cmp	r3, #0
 800183a:	d1ee      	bne.n	800181a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800183c:	7dfb      	ldrb	r3, [r7, #23]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d105      	bne.n	800184e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001842:	4b48      	ldr	r3, [pc, #288]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 8001844:	69db      	ldr	r3, [r3, #28]
 8001846:	4a47      	ldr	r2, [pc, #284]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 8001848:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800184c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	69db      	ldr	r3, [r3, #28]
 8001852:	2b00      	cmp	r3, #0
 8001854:	f000 8081 	beq.w	800195a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001858:	4b42      	ldr	r3, [pc, #264]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	f003 030c 	and.w	r3, r3, #12
 8001860:	2b08      	cmp	r3, #8
 8001862:	d061      	beq.n	8001928 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	69db      	ldr	r3, [r3, #28]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d146      	bne.n	80018fa <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800186c:	4b3f      	ldr	r3, [pc, #252]	; (800196c <HAL_RCC_OscConfig+0x4fc>)
 800186e:	2200      	movs	r2, #0
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fb43 	bl	8000efc <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff fb3f 	bl	8000efc <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e067      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800188c:	4b35      	ldr	r3, [pc, #212]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1f0      	bne.n	800187a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	6a1b      	ldr	r3, [r3, #32]
 800189c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80018a0:	d108      	bne.n	80018b4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80018a2:	4b30      	ldr	r3, [pc, #192]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 80018a4:	685b      	ldr	r3, [r3, #4]
 80018a6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	689b      	ldr	r3, [r3, #8]
 80018ae:	492d      	ldr	r1, [pc, #180]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 80018b0:	4313      	orrs	r3, r2
 80018b2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018b4:	4b2b      	ldr	r3, [pc, #172]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	6a19      	ldr	r1, [r3, #32]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c4:	430b      	orrs	r3, r1
 80018c6:	4927      	ldr	r1, [pc, #156]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 80018c8:	4313      	orrs	r3, r2
 80018ca:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80018cc:	4b27      	ldr	r3, [pc, #156]	; (800196c <HAL_RCC_OscConfig+0x4fc>)
 80018ce:	2201      	movs	r2, #1
 80018d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018d2:	f7ff fb13 	bl	8000efc <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018d8:	e008      	b.n	80018ec <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018da:	f7ff fb0f 	bl	8000efc <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d901      	bls.n	80018ec <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e037      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80018ec:	4b1d      	ldr	r3, [pc, #116]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d0f0      	beq.n	80018da <HAL_RCC_OscConfig+0x46a>
 80018f8:	e02f      	b.n	800195a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018fa:	4b1c      	ldr	r3, [pc, #112]	; (800196c <HAL_RCC_OscConfig+0x4fc>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001900:	f7ff fafc 	bl	8000efc <HAL_GetTick>
 8001904:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001906:	e008      	b.n	800191a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001908:	f7ff faf8 	bl	8000efc <HAL_GetTick>
 800190c:	4602      	mov	r2, r0
 800190e:	693b      	ldr	r3, [r7, #16]
 8001910:	1ad3      	subs	r3, r2, r3
 8001912:	2b02      	cmp	r3, #2
 8001914:	d901      	bls.n	800191a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001916:	2303      	movs	r3, #3
 8001918:	e020      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191a:	4b12      	ldr	r3, [pc, #72]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001922:	2b00      	cmp	r3, #0
 8001924:	d1f0      	bne.n	8001908 <HAL_RCC_OscConfig+0x498>
 8001926:	e018      	b.n	800195a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	69db      	ldr	r3, [r3, #28]
 800192c:	2b01      	cmp	r3, #1
 800192e:	d101      	bne.n	8001934 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	e013      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <HAL_RCC_OscConfig+0x4f4>)
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	6a1b      	ldr	r3, [r3, #32]
 8001944:	429a      	cmp	r2, r3
 8001946:	d106      	bne.n	8001956 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001952:	429a      	cmp	r2, r3
 8001954:	d001      	beq.n	800195a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e000      	b.n	800195c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800195a:	2300      	movs	r3, #0
}
 800195c:	4618      	mov	r0, r3
 800195e:	3718      	adds	r7, #24
 8001960:	46bd      	mov	sp, r7
 8001962:	bd80      	pop	{r7, pc}
 8001964:	40021000 	.word	0x40021000
 8001968:	40007000 	.word	0x40007000
 800196c:	42420060 	.word	0x42420060

08001970 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b084      	sub	sp, #16
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d101      	bne.n	8001984 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e0d0      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001984:	4b6a      	ldr	r3, [pc, #424]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d910      	bls.n	80019b4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001992:	4b67      	ldr	r3, [pc, #412]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	f023 0207 	bic.w	r2, r3, #7
 800199a:	4965      	ldr	r1, [pc, #404]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	4313      	orrs	r3, r2
 80019a0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80019a2:	4b63      	ldr	r3, [pc, #396]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	f003 0307 	and.w	r3, r3, #7
 80019aa:	683a      	ldr	r2, [r7, #0]
 80019ac:	429a      	cmp	r2, r3
 80019ae:	d001      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e0b8      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0302 	and.w	r3, r3, #2
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d020      	beq.n	8001a02 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d005      	beq.n	80019d8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80019cc:	4b59      	ldr	r3, [pc, #356]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	4a58      	ldr	r2, [pc, #352]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019d2:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 80019d6:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d005      	beq.n	80019f0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80019e4:	4b53      	ldr	r3, [pc, #332]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019e6:	685b      	ldr	r3, [r3, #4]
 80019e8:	4a52      	ldr	r2, [pc, #328]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019ea:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80019ee:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f0:	4b50      	ldr	r3, [pc, #320]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	494d      	ldr	r1, [pc, #308]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 80019fe:	4313      	orrs	r3, r2
 8001a00:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 0301 	and.w	r3, r3, #1
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d040      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	685b      	ldr	r3, [r3, #4]
 8001a12:	2b01      	cmp	r3, #1
 8001a14:	d107      	bne.n	8001a26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001a16:	4b47      	ldr	r3, [pc, #284]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d115      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a22:	2301      	movs	r3, #1
 8001a24:	e07f      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	685b      	ldr	r3, [r3, #4]
 8001a2a:	2b02      	cmp	r3, #2
 8001a2c:	d107      	bne.n	8001a3e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a2e:	4b41      	ldr	r3, [pc, #260]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d109      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e073      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001a3e:	4b3d      	ldr	r3, [pc, #244]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f003 0302 	and.w	r3, r3, #2
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e06b      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001a4e:	4b39      	ldr	r3, [pc, #228]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f023 0203 	bic.w	r2, r3, #3
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	685b      	ldr	r3, [r3, #4]
 8001a5a:	4936      	ldr	r1, [pc, #216]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a60:	f7ff fa4c 	bl	8000efc <HAL_GetTick>
 8001a64:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a66:	e00a      	b.n	8001a7e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a68:	f7ff fa48 	bl	8000efc <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a76:	4293      	cmp	r3, r2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e053      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a7e:	4b2d      	ldr	r3, [pc, #180]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	f003 020c 	and.w	r2, r3, #12
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	009b      	lsls	r3, r3, #2
 8001a8c:	429a      	cmp	r2, r3
 8001a8e:	d1eb      	bne.n	8001a68 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a90:	4b27      	ldr	r3, [pc, #156]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0307 	and.w	r3, r3, #7
 8001a98:	683a      	ldr	r2, [r7, #0]
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d210      	bcs.n	8001ac0 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a9e:	4b24      	ldr	r3, [pc, #144]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f023 0207 	bic.w	r2, r3, #7
 8001aa6:	4922      	ldr	r1, [pc, #136]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	4313      	orrs	r3, r2
 8001aac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aae:	4b20      	ldr	r3, [pc, #128]	; (8001b30 <HAL_RCC_ClockConfig+0x1c0>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	683a      	ldr	r2, [r7, #0]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d001      	beq.n	8001ac0 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e032      	b.n	8001b26 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f003 0304 	and.w	r3, r3, #4
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	68db      	ldr	r3, [r3, #12]
 8001ad8:	4916      	ldr	r1, [pc, #88]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0308 	and.w	r3, r3, #8
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d009      	beq.n	8001afe <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001aea:	4b12      	ldr	r3, [pc, #72]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	691b      	ldr	r3, [r3, #16]
 8001af6:	00db      	lsls	r3, r3, #3
 8001af8:	490e      	ldr	r1, [pc, #56]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001afa:	4313      	orrs	r3, r2
 8001afc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001afe:	f000 f821 	bl	8001b44 <HAL_RCC_GetSysClockFreq>
 8001b02:	4601      	mov	r1, r0
 8001b04:	4b0b      	ldr	r3, [pc, #44]	; (8001b34 <HAL_RCC_ClockConfig+0x1c4>)
 8001b06:	685b      	ldr	r3, [r3, #4]
 8001b08:	091b      	lsrs	r3, r3, #4
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	4a0a      	ldr	r2, [pc, #40]	; (8001b38 <HAL_RCC_ClockConfig+0x1c8>)
 8001b10:	5cd3      	ldrb	r3, [r2, r3]
 8001b12:	fa21 f303 	lsr.w	r3, r1, r3
 8001b16:	4a09      	ldr	r2, [pc, #36]	; (8001b3c <HAL_RCC_ClockConfig+0x1cc>)
 8001b18:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001b1a:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <HAL_RCC_ClockConfig+0x1d0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4618      	mov	r0, r3
 8001b20:	f7ff f9aa 	bl	8000e78 <HAL_InitTick>

  return HAL_OK;
 8001b24:	2300      	movs	r3, #0
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	3710      	adds	r7, #16
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}
 8001b2e:	bf00      	nop
 8001b30:	40022000 	.word	0x40022000
 8001b34:	40021000 	.word	0x40021000
 8001b38:	08003110 	.word	0x08003110
 8001b3c:	20000008 	.word	0x20000008
 8001b40:	2000000c 	.word	0x2000000c

08001b44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b44:	b490      	push	{r4, r7}
 8001b46:	b08a      	sub	sp, #40	; 0x28
 8001b48:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8001b4a:	4b2a      	ldr	r3, [pc, #168]	; (8001bf4 <HAL_RCC_GetSysClockFreq+0xb0>)
 8001b4c:	1d3c      	adds	r4, r7, #4
 8001b4e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001b50:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8001b54:	4b28      	ldr	r3, [pc, #160]	; (8001bf8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8001b56:	881b      	ldrh	r3, [r3, #0]
 8001b58:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	2300      	movs	r3, #0
 8001b60:	61bb      	str	r3, [r7, #24]
 8001b62:	2300      	movs	r3, #0
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
 8001b66:	2300      	movs	r3, #0
 8001b68:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001b6a:	2300      	movs	r3, #0
 8001b6c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b6e:	4b23      	ldr	r3, [pc, #140]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f003 030c 	and.w	r3, r3, #12
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	d002      	beq.n	8001b84 <HAL_RCC_GetSysClockFreq+0x40>
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d003      	beq.n	8001b8a <HAL_RCC_GetSysClockFreq+0x46>
 8001b82:	e02d      	b.n	8001be0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b84:	4b1e      	ldr	r3, [pc, #120]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001b86:	623b      	str	r3, [r7, #32]
      break;
 8001b88:	e02d      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	0c9b      	lsrs	r3, r3, #18
 8001b8e:	f003 030f 	and.w	r3, r3, #15
 8001b92:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001b96:	4413      	add	r3, r2
 8001b98:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8001b9c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b9e:	69fb      	ldr	r3, [r7, #28]
 8001ba0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d013      	beq.n	8001bd0 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001ba8:	4b14      	ldr	r3, [pc, #80]	; (8001bfc <HAL_RCC_GetSysClockFreq+0xb8>)
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	0c5b      	lsrs	r3, r3, #17
 8001bae:	f003 0301 	and.w	r3, r3, #1
 8001bb2:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8001bb6:	4413      	add	r3, r2
 8001bb8:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8001bbc:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	4a0f      	ldr	r2, [pc, #60]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001bc2:	fb02 f203 	mul.w	r2, r2, r3
 8001bc6:	69bb      	ldr	r3, [r7, #24]
 8001bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bcc:	627b      	str	r3, [r7, #36]	; 0x24
 8001bce:	e004      	b.n	8001bda <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	4a0c      	ldr	r2, [pc, #48]	; (8001c04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001bd4:	fb02 f303 	mul.w	r3, r2, r3
 8001bd8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8001bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bdc:	623b      	str	r3, [r7, #32]
      break;
 8001bde:	e002      	b.n	8001be6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001be0:	4b07      	ldr	r3, [pc, #28]	; (8001c00 <HAL_RCC_GetSysClockFreq+0xbc>)
 8001be2:	623b      	str	r3, [r7, #32]
      break;
 8001be4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001be6:	6a3b      	ldr	r3, [r7, #32]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3728      	adds	r7, #40	; 0x28
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bc90      	pop	{r4, r7}
 8001bf0:	4770      	bx	lr
 8001bf2:	bf00      	nop
 8001bf4:	080030fc 	.word	0x080030fc
 8001bf8:	0800310c 	.word	0x0800310c
 8001bfc:	40021000 	.word	0x40021000
 8001c00:	007a1200 	.word	0x007a1200
 8001c04:	003d0900 	.word	0x003d0900

08001c08 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c0c:	4b02      	ldr	r3, [pc, #8]	; (8001c18 <HAL_RCC_GetHCLKFreq+0x10>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
}
 8001c10:	4618      	mov	r0, r3
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr
 8001c18:	20000008 	.word	0x20000008

08001c1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c1c:	b580      	push	{r7, lr}
 8001c1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c20:	f7ff fff2 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c24:	4601      	mov	r1, r0
 8001c26:	4b05      	ldr	r3, [pc, #20]	; (8001c3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	0a1b      	lsrs	r3, r3, #8
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	4a03      	ldr	r2, [pc, #12]	; (8001c40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c32:	5cd3      	ldrb	r3, [r2, r3]
 8001c34:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	bd80      	pop	{r7, pc}
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	08003120 	.word	0x08003120

08001c44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c48:	f7ff ffde 	bl	8001c08 <HAL_RCC_GetHCLKFreq>
 8001c4c:	4601      	mov	r1, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	0adb      	lsrs	r3, r3, #11
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4a03      	ldr	r2, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40021000 	.word	0x40021000
 8001c68:	08003120 	.word	0x08003120

08001c6c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b085      	sub	sp, #20
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001c74:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <RCC_Delay+0x34>)
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a0a      	ldr	r2, [pc, #40]	; (8001ca4 <RCC_Delay+0x38>)
 8001c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c7e:	0a5b      	lsrs	r3, r3, #9
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	fb02 f303 	mul.w	r3, r2, r3
 8001c86:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001c88:	bf00      	nop
  }
  while (Delay --);
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	1e5a      	subs	r2, r3, #1
 8001c8e:	60fa      	str	r2, [r7, #12]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d1f9      	bne.n	8001c88 <RCC_Delay+0x1c>
}
 8001c94:	bf00      	nop
 8001c96:	3714      	adds	r7, #20
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bc80      	pop	{r7}
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	20000008 	.word	0x20000008
 8001ca4:	10624dd3 	.word	0x10624dd3

08001ca8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b082      	sub	sp, #8
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d101      	bne.n	8001cba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e041      	b.n	8001d3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cc0:	b2db      	uxtb	r3, r3
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d106      	bne.n	8001cd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cce:	6878      	ldr	r0, [r7, #4]
 8001cd0:	f7fe ffc2 	bl	8000c58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	2202      	movs	r2, #2
 8001cd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681a      	ldr	r2, [r3, #0]
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	4610      	mov	r0, r2
 8001ce8:	f000 fa64 	bl	80021b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2201      	movs	r2, #1
 8001cf0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2201      	movs	r2, #1
 8001cf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	2201      	movs	r2, #1
 8001d08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2201      	movs	r2, #1
 8001d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2201      	movs	r2, #1
 8001d20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2201      	movs	r2, #1
 8001d28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	2201      	movs	r2, #1
 8001d30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	2201      	movs	r2, #1
 8001d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d3c:	2300      	movs	r3, #0
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3708      	adds	r7, #8
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
	...

08001d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d48:	b480      	push	{r7}
 8001d4a:	b085      	sub	sp, #20
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d001      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d5c:	2301      	movs	r3, #1
 8001d5e:	e03a      	b.n	8001dd6 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2202      	movs	r2, #2
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	68da      	ldr	r2, [r3, #12]
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	f042 0201 	orr.w	r2, r2, #1
 8001d76:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a18      	ldr	r2, [pc, #96]	; (8001de0 <HAL_TIM_Base_Start_IT+0x98>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d00e      	beq.n	8001da0 <HAL_TIM_Base_Start_IT+0x58>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d8a:	d009      	beq.n	8001da0 <HAL_TIM_Base_Start_IT+0x58>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a14      	ldr	r2, [pc, #80]	; (8001de4 <HAL_TIM_Base_Start_IT+0x9c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d004      	beq.n	8001da0 <HAL_TIM_Base_Start_IT+0x58>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a13      	ldr	r2, [pc, #76]	; (8001de8 <HAL_TIM_Base_Start_IT+0xa0>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d111      	bne.n	8001dc4 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	689b      	ldr	r3, [r3, #8]
 8001da6:	f003 0307 	and.w	r3, r3, #7
 8001daa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2b06      	cmp	r3, #6
 8001db0:	d010      	beq.n	8001dd4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f042 0201 	orr.w	r2, r2, #1
 8001dc0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dc2:	e007      	b.n	8001dd4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	f042 0201 	orr.w	r2, r2, #1
 8001dd2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3714      	adds	r7, #20
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bc80      	pop	{r7}
 8001dde:	4770      	bx	lr
 8001de0:	40012c00 	.word	0x40012c00
 8001de4:	40000400 	.word	0x40000400
 8001de8:	40000800 	.word	0x40000800

08001dec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b082      	sub	sp, #8
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	691b      	ldr	r3, [r3, #16]
 8001dfa:	f003 0302 	and.w	r3, r3, #2
 8001dfe:	2b02      	cmp	r3, #2
 8001e00:	d122      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b02      	cmp	r3, #2
 8001e0e:	d11b      	bne.n	8001e48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f06f 0202 	mvn.w	r2, #2
 8001e18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	699b      	ldr	r3, [r3, #24]
 8001e26:	f003 0303 	and.w	r3, r3, #3
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d003      	beq.n	8001e36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f000 f9a4 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001e34:	e005      	b.n	8001e42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e36:	6878      	ldr	r0, [r7, #4]
 8001e38:	f000 f997 	bl	800216a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e3c:	6878      	ldr	r0, [r7, #4]
 8001e3e:	f000 f9a6 	bl	800218e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	691b      	ldr	r3, [r3, #16]
 8001e4e:	f003 0304 	and.w	r3, r3, #4
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	d122      	bne.n	8001e9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	d11b      	bne.n	8001e9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f06f 0204 	mvn.w	r2, #4
 8001e6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	2202      	movs	r2, #2
 8001e72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f000 f97a 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001e88:	e005      	b.n	8001e96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 f96d 	bl	800216a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f000 f97c 	bl	800218e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2200      	movs	r2, #0
 8001e9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	691b      	ldr	r3, [r3, #16]
 8001ea2:	f003 0308 	and.w	r3, r3, #8
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d122      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	68db      	ldr	r3, [r3, #12]
 8001eb0:	f003 0308 	and.w	r3, r3, #8
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d11b      	bne.n	8001ef0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f06f 0208 	mvn.w	r2, #8
 8001ec0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	2204      	movs	r2, #4
 8001ec6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	f003 0303 	and.w	r3, r3, #3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d003      	beq.n	8001ede <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ed6:	6878      	ldr	r0, [r7, #4]
 8001ed8:	f000 f950 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001edc:	e005      	b.n	8001eea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ede:	6878      	ldr	r0, [r7, #4]
 8001ee0:	f000 f943 	bl	800216a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 f952 	bl	800218e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	2200      	movs	r2, #0
 8001eee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	691b      	ldr	r3, [r3, #16]
 8001ef6:	f003 0310 	and.w	r3, r3, #16
 8001efa:	2b10      	cmp	r3, #16
 8001efc:	d122      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	68db      	ldr	r3, [r3, #12]
 8001f04:	f003 0310 	and.w	r3, r3, #16
 8001f08:	2b10      	cmp	r3, #16
 8001f0a:	d11b      	bne.n	8001f44 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f06f 0210 	mvn.w	r2, #16
 8001f14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2208      	movs	r2, #8
 8001f1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	69db      	ldr	r3, [r3, #28]
 8001f22:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001f2a:	6878      	ldr	r0, [r7, #4]
 8001f2c:	f000 f926 	bl	800217c <HAL_TIM_IC_CaptureCallback>
 8001f30:	e005      	b.n	8001f3e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001f32:	6878      	ldr	r0, [r7, #4]
 8001f34:	f000 f919 	bl	800216a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f000 f928 	bl	800218e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2200      	movs	r2, #0
 8001f42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	691b      	ldr	r3, [r3, #16]
 8001f4a:	f003 0301 	and.w	r3, r3, #1
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d10e      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	68db      	ldr	r3, [r3, #12]
 8001f58:	f003 0301 	and.w	r3, r3, #1
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	d107      	bne.n	8001f70 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f06f 0201 	mvn.w	r2, #1
 8001f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f6a:	6878      	ldr	r0, [r7, #4]
 8001f6c:	f7fe fca8 	bl	80008c0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	691b      	ldr	r3, [r3, #16]
 8001f76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f7a:	2b80      	cmp	r3, #128	; 0x80
 8001f7c:	d10e      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	68db      	ldr	r3, [r3, #12]
 8001f84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f88:	2b80      	cmp	r3, #128	; 0x80
 8001f8a:	d107      	bne.n	8001f9c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001f94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f96:	6878      	ldr	r0, [r7, #4]
 8001f98:	f000 fa6b 	bl	8002472 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	691b      	ldr	r3, [r3, #16]
 8001fa2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fa6:	2b40      	cmp	r3, #64	; 0x40
 8001fa8:	d10e      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	68db      	ldr	r3, [r3, #12]
 8001fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb4:	2b40      	cmp	r3, #64	; 0x40
 8001fb6:	d107      	bne.n	8001fc8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001fc2:	6878      	ldr	r0, [r7, #4]
 8001fc4:	f000 f8ec 	bl	80021a0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0320 	and.w	r3, r3, #32
 8001fd2:	2b20      	cmp	r3, #32
 8001fd4:	d10e      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0320 	and.w	r3, r3, #32
 8001fe0:	2b20      	cmp	r3, #32
 8001fe2:	d107      	bne.n	8001ff4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f06f 0220 	mvn.w	r2, #32
 8001fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f000 fa36 	bl	8002460 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001ff4:	bf00      	nop
 8001ff6:	3708      	adds	r7, #8
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}

08001ffc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001ffc:	b580      	push	{r7, lr}
 8001ffe:	b084      	sub	sp, #16
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800200c:	2b01      	cmp	r3, #1
 800200e:	d101      	bne.n	8002014 <HAL_TIM_ConfigClockSource+0x18>
 8002010:	2302      	movs	r3, #2
 8002012:	e0a6      	b.n	8002162 <HAL_TIM_ConfigClockSource+0x166>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	2201      	movs	r2, #1
 8002018:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2202      	movs	r2, #2
 8002020:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002032:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800203a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	68fa      	ldr	r2, [r7, #12]
 8002042:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	2b40      	cmp	r3, #64	; 0x40
 800204a:	d067      	beq.n	800211c <HAL_TIM_ConfigClockSource+0x120>
 800204c:	2b40      	cmp	r3, #64	; 0x40
 800204e:	d80b      	bhi.n	8002068 <HAL_TIM_ConfigClockSource+0x6c>
 8002050:	2b10      	cmp	r3, #16
 8002052:	d073      	beq.n	800213c <HAL_TIM_ConfigClockSource+0x140>
 8002054:	2b10      	cmp	r3, #16
 8002056:	d802      	bhi.n	800205e <HAL_TIM_ConfigClockSource+0x62>
 8002058:	2b00      	cmp	r3, #0
 800205a:	d06f      	beq.n	800213c <HAL_TIM_ConfigClockSource+0x140>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 800205c:	e078      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800205e:	2b20      	cmp	r3, #32
 8002060:	d06c      	beq.n	800213c <HAL_TIM_ConfigClockSource+0x140>
 8002062:	2b30      	cmp	r3, #48	; 0x30
 8002064:	d06a      	beq.n	800213c <HAL_TIM_ConfigClockSource+0x140>
      break;
 8002066:	e073      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 8002068:	2b70      	cmp	r3, #112	; 0x70
 800206a:	d00d      	beq.n	8002088 <HAL_TIM_ConfigClockSource+0x8c>
 800206c:	2b70      	cmp	r3, #112	; 0x70
 800206e:	d804      	bhi.n	800207a <HAL_TIM_ConfigClockSource+0x7e>
 8002070:	2b50      	cmp	r3, #80	; 0x50
 8002072:	d033      	beq.n	80020dc <HAL_TIM_ConfigClockSource+0xe0>
 8002074:	2b60      	cmp	r3, #96	; 0x60
 8002076:	d041      	beq.n	80020fc <HAL_TIM_ConfigClockSource+0x100>
      break;
 8002078:	e06a      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800207a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800207e:	d066      	beq.n	800214e <HAL_TIM_ConfigClockSource+0x152>
 8002080:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002084:	d017      	beq.n	80020b6 <HAL_TIM_ConfigClockSource+0xba>
      break;
 8002086:	e063      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6818      	ldr	r0, [r3, #0]
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	6899      	ldr	r1, [r3, #8]
 8002090:	683b      	ldr	r3, [r7, #0]
 8002092:	685a      	ldr	r2, [r3, #4]
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	f000 f965 	bl	8002366 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	689b      	ldr	r3, [r3, #8]
 80020a2:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80020aa:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	68fa      	ldr	r2, [r7, #12]
 80020b2:	609a      	str	r2, [r3, #8]
      break;
 80020b4:	e04c      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6818      	ldr	r0, [r3, #0]
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	6899      	ldr	r1, [r3, #8]
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	68db      	ldr	r3, [r3, #12]
 80020c6:	f000 f94e 	bl	8002366 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80020d8:	609a      	str	r2, [r3, #8]
      break;
 80020da:	e039      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	6818      	ldr	r0, [r3, #0]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	6859      	ldr	r1, [r3, #4]
 80020e4:	683b      	ldr	r3, [r7, #0]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	461a      	mov	r2, r3
 80020ea:	f000 f8c5 	bl	8002278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2150      	movs	r1, #80	; 0x50
 80020f4:	4618      	mov	r0, r3
 80020f6:	f000 f91c 	bl	8002332 <TIM_ITRx_SetConfig>
      break;
 80020fa:	e029      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6818      	ldr	r0, [r3, #0]
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	683b      	ldr	r3, [r7, #0]
 8002106:	68db      	ldr	r3, [r3, #12]
 8002108:	461a      	mov	r2, r3
 800210a:	f000 f8e3 	bl	80022d4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2160      	movs	r1, #96	; 0x60
 8002114:	4618      	mov	r0, r3
 8002116:	f000 f90c 	bl	8002332 <TIM_ITRx_SetConfig>
      break;
 800211a:	e019      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6818      	ldr	r0, [r3, #0]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	6859      	ldr	r1, [r3, #4]
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	68db      	ldr	r3, [r3, #12]
 8002128:	461a      	mov	r2, r3
 800212a:	f000 f8a5 	bl	8002278 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	2140      	movs	r1, #64	; 0x40
 8002134:	4618      	mov	r0, r3
 8002136:	f000 f8fc 	bl	8002332 <TIM_ITRx_SetConfig>
      break;
 800213a:	e009      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4619      	mov	r1, r3
 8002146:	4610      	mov	r0, r2
 8002148:	f000 f8f3 	bl	8002332 <TIM_ITRx_SetConfig>
        break;
 800214c:	e000      	b.n	8002150 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800214e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2200      	movs	r2, #0
 800215c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002160:	2300      	movs	r3, #0
}
 8002162:	4618      	mov	r0, r3
 8002164:	3710      	adds	r7, #16
 8002166:	46bd      	mov	sp, r7
 8002168:	bd80      	pop	{r7, pc}

0800216a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800216a:	b480      	push	{r7}
 800216c:	b083      	sub	sp, #12
 800216e:	af00      	add	r7, sp, #0
 8002170:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002172:	bf00      	nop
 8002174:	370c      	adds	r7, #12
 8002176:	46bd      	mov	sp, r7
 8002178:	bc80      	pop	{r7}
 800217a:	4770      	bx	lr

0800217c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800217c:	b480      	push	{r7}
 800217e:	b083      	sub	sp, #12
 8002180:	af00      	add	r7, sp, #0
 8002182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002184:	bf00      	nop
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	bc80      	pop	{r7}
 800218c:	4770      	bx	lr

0800218e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800218e:	b480      	push	{r7}
 8002190:	b083      	sub	sp, #12
 8002192:	af00      	add	r7, sp, #0
 8002194:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	bc80      	pop	{r7}
 800219e:	4770      	bx	lr

080021a0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b083      	sub	sp, #12
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021a8:	bf00      	nop
 80021aa:	370c      	adds	r7, #12
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bc80      	pop	{r7}
 80021b0:	4770      	bx	lr
	...

080021b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80021b4:	b480      	push	{r7}
 80021b6:	b085      	sub	sp, #20
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a29      	ldr	r2, [pc, #164]	; (800226c <TIM_Base_SetConfig+0xb8>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00b      	beq.n	80021e4 <TIM_Base_SetConfig+0x30>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d2:	d007      	beq.n	80021e4 <TIM_Base_SetConfig+0x30>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a26      	ldr	r2, [pc, #152]	; (8002270 <TIM_Base_SetConfig+0xbc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d003      	beq.n	80021e4 <TIM_Base_SetConfig+0x30>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a25      	ldr	r2, [pc, #148]	; (8002274 <TIM_Base_SetConfig+0xc0>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d108      	bne.n	80021f6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021e4:	68fb      	ldr	r3, [r7, #12]
 80021e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80021ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	685b      	ldr	r3, [r3, #4]
 80021f0:	68fa      	ldr	r2, [r7, #12]
 80021f2:	4313      	orrs	r3, r2
 80021f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	4a1c      	ldr	r2, [pc, #112]	; (800226c <TIM_Base_SetConfig+0xb8>)
 80021fa:	4293      	cmp	r3, r2
 80021fc:	d00b      	beq.n	8002216 <TIM_Base_SetConfig+0x62>
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002204:	d007      	beq.n	8002216 <TIM_Base_SetConfig+0x62>
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <TIM_Base_SetConfig+0xbc>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d003      	beq.n	8002216 <TIM_Base_SetConfig+0x62>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a18      	ldr	r2, [pc, #96]	; (8002274 <TIM_Base_SetConfig+0xc0>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d108      	bne.n	8002228 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800221c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	68fa      	ldr	r2, [r7, #12]
 8002224:	4313      	orrs	r3, r2
 8002226:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	695b      	ldr	r3, [r3, #20]
 8002232:	4313      	orrs	r3, r2
 8002234:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	68fa      	ldr	r2, [r7, #12]
 800223a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800223c:	683b      	ldr	r3, [r7, #0]
 800223e:	689a      	ldr	r2, [r3, #8]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681a      	ldr	r2, [r3, #0]
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	4a07      	ldr	r2, [pc, #28]	; (800226c <TIM_Base_SetConfig+0xb8>)
 8002250:	4293      	cmp	r3, r2
 8002252:	d103      	bne.n	800225c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	691a      	ldr	r2, [r3, #16]
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	2201      	movs	r2, #1
 8002260:	615a      	str	r2, [r3, #20]
}
 8002262:	bf00      	nop
 8002264:	3714      	adds	r7, #20
 8002266:	46bd      	mov	sp, r7
 8002268:	bc80      	pop	{r7}
 800226a:	4770      	bx	lr
 800226c:	40012c00 	.word	0x40012c00
 8002270:	40000400 	.word	0x40000400
 8002274:	40000800 	.word	0x40000800

08002278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002278:	b480      	push	{r7}
 800227a:	b087      	sub	sp, #28
 800227c:	af00      	add	r7, sp, #0
 800227e:	60f8      	str	r0, [r7, #12]
 8002280:	60b9      	str	r1, [r7, #8]
 8002282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	6a1b      	ldr	r3, [r3, #32]
 8002288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	6a1b      	ldr	r3, [r3, #32]
 800228e:	f023 0201 	bic.w	r2, r3, #1
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80022a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	011b      	lsls	r3, r3, #4
 80022a8:	693a      	ldr	r2, [r7, #16]
 80022aa:	4313      	orrs	r3, r2
 80022ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022ae:	697b      	ldr	r3, [r7, #20]
 80022b0:	f023 030a 	bic.w	r3, r3, #10
 80022b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	4313      	orrs	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	693a      	ldr	r2, [r7, #16]
 80022c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	697a      	ldr	r2, [r7, #20]
 80022c8:	621a      	str	r2, [r3, #32]
}
 80022ca:	bf00      	nop
 80022cc:	371c      	adds	r7, #28
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b087      	sub	sp, #28
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6a1b      	ldr	r3, [r3, #32]
 80022e4:	f023 0210 	bic.w	r2, r3, #16
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	699b      	ldr	r3, [r3, #24]
 80022f0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022f8:	697b      	ldr	r3, [r7, #20]
 80022fa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80022fe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	031b      	lsls	r3, r3, #12
 8002304:	697a      	ldr	r2, [r7, #20]
 8002306:	4313      	orrs	r3, r2
 8002308:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800230a:	693b      	ldr	r3, [r7, #16]
 800230c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002310:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002312:	68bb      	ldr	r3, [r7, #8]
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	693a      	ldr	r2, [r7, #16]
 8002318:	4313      	orrs	r3, r2
 800231a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	693a      	ldr	r2, [r7, #16]
 8002326:	621a      	str	r2, [r3, #32]
}
 8002328:	bf00      	nop
 800232a:	371c      	adds	r7, #28
 800232c:	46bd      	mov	sp, r7
 800232e:	bc80      	pop	{r7}
 8002330:	4770      	bx	lr

08002332 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002332:	b480      	push	{r7}
 8002334:	b085      	sub	sp, #20
 8002336:	af00      	add	r7, sp, #0
 8002338:	6078      	str	r0, [r7, #4]
 800233a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	689b      	ldr	r3, [r3, #8]
 8002340:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002348:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800234a:	683a      	ldr	r2, [r7, #0]
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	4313      	orrs	r3, r2
 8002350:	f043 0307 	orr.w	r3, r3, #7
 8002354:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	68fa      	ldr	r2, [r7, #12]
 800235a:	609a      	str	r2, [r3, #8]
}
 800235c:	bf00      	nop
 800235e:	3714      	adds	r7, #20
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr

08002366 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002366:	b480      	push	{r7}
 8002368:	b087      	sub	sp, #28
 800236a:	af00      	add	r7, sp, #0
 800236c:	60f8      	str	r0, [r7, #12]
 800236e:	60b9      	str	r1, [r7, #8]
 8002370:	607a      	str	r2, [r7, #4]
 8002372:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002380:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	021a      	lsls	r2, r3, #8
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	431a      	orrs	r2, r3
 800238a:	68bb      	ldr	r3, [r7, #8]
 800238c:	4313      	orrs	r3, r2
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	4313      	orrs	r3, r2
 8002392:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	697a      	ldr	r2, [r7, #20]
 8002398:	609a      	str	r2, [r3, #8]
}
 800239a:	bf00      	nop
 800239c:	371c      	adds	r7, #28
 800239e:	46bd      	mov	sp, r7
 80023a0:	bc80      	pop	{r7}
 80023a2:	4770      	bx	lr

080023a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e046      	b.n	800244a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80023e2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68fa      	ldr	r2, [r7, #12]
 80023ea:	4313      	orrs	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4a16      	ldr	r2, [pc, #88]	; (8002454 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80023fc:	4293      	cmp	r3, r2
 80023fe:	d00e      	beq.n	800241e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002408:	d009      	beq.n	800241e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a12      	ldr	r2, [pc, #72]	; (8002458 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002410:	4293      	cmp	r3, r2
 8002412:	d004      	beq.n	800241e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4a10      	ldr	r2, [pc, #64]	; (800245c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d10c      	bne.n	8002438 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002424:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	685b      	ldr	r3, [r3, #4]
 800242a:	68ba      	ldr	r2, [r7, #8]
 800242c:	4313      	orrs	r3, r2
 800242e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	68ba      	ldr	r2, [r7, #8]
 8002436:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2200      	movs	r2, #0
 8002444:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3714      	adds	r7, #20
 800244e:	46bd      	mov	sp, r7
 8002450:	bc80      	pop	{r7}
 8002452:	4770      	bx	lr
 8002454:	40012c00 	.word	0x40012c00
 8002458:	40000400 	.word	0x40000400
 800245c:	40000800 	.word	0x40000800

08002460 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002468:	bf00      	nop
 800246a:	370c      	adds	r7, #12
 800246c:	46bd      	mov	sp, r7
 800246e:	bc80      	pop	{r7}
 8002470:	4770      	bx	lr

08002472 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002472:	b480      	push	{r7}
 8002474:	b083      	sub	sp, #12
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800247a:	bf00      	nop
 800247c:	370c      	adds	r7, #12
 800247e:	46bd      	mov	sp, r7
 8002480:	bc80      	pop	{r7}
 8002482:	4770      	bx	lr

08002484 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d101      	bne.n	8002496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e03f      	b.n	8002516 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800249c:	b2db      	uxtb	r3, r3
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d106      	bne.n	80024b0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	2200      	movs	r2, #0
 80024a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80024aa:	6878      	ldr	r0, [r7, #4]
 80024ac:	f7fe fbfa 	bl	8000ca4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2224      	movs	r2, #36	; 0x24
 80024b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	68da      	ldr	r2, [r3, #12]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80024c6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80024c8:	6878      	ldr	r0, [r7, #4]
 80024ca:	f000 f905 	bl	80026d8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	691a      	ldr	r2, [r3, #16]
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80024dc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	695a      	ldr	r2, [r3, #20]
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80024ec:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	68da      	ldr	r2, [r3, #12]
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80024fc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2200      	movs	r2, #0
 8002502:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2220      	movs	r2, #32
 8002508:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	2220      	movs	r2, #32
 8002510:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8002514:	2300      	movs	r3, #0
}
 8002516:	4618      	mov	r0, r3
 8002518:	3708      	adds	r7, #8
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800251e:	b580      	push	{r7, lr}
 8002520:	b08a      	sub	sp, #40	; 0x28
 8002522:	af02      	add	r7, sp, #8
 8002524:	60f8      	str	r0, [r7, #12]
 8002526:	60b9      	str	r1, [r7, #8]
 8002528:	603b      	str	r3, [r7, #0]
 800252a:	4613      	mov	r3, r2
 800252c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800252e:	2300      	movs	r3, #0
 8002530:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002538:	b2db      	uxtb	r3, r3
 800253a:	2b20      	cmp	r3, #32
 800253c:	d17c      	bne.n	8002638 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800253e:	68bb      	ldr	r3, [r7, #8]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d002      	beq.n	800254a <HAL_UART_Transmit+0x2c>
 8002544:	88fb      	ldrh	r3, [r7, #6]
 8002546:	2b00      	cmp	r3, #0
 8002548:	d101      	bne.n	800254e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e075      	b.n	800263a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002554:	2b01      	cmp	r3, #1
 8002556:	d101      	bne.n	800255c <HAL_UART_Transmit+0x3e>
 8002558:	2302      	movs	r3, #2
 800255a:	e06e      	b.n	800263a <HAL_UART_Transmit+0x11c>
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	2200      	movs	r2, #0
 8002568:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800256a:	68fb      	ldr	r3, [r7, #12]
 800256c:	2221      	movs	r2, #33	; 0x21
 800256e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 8002572:	f7fe fcc3 	bl	8000efc <HAL_GetTick>
 8002576:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	88fa      	ldrh	r2, [r7, #6]
 800257c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	88fa      	ldrh	r2, [r7, #6]
 8002582:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800258c:	d108      	bne.n	80025a0 <HAL_UART_Transmit+0x82>
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	691b      	ldr	r3, [r3, #16]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d104      	bne.n	80025a0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8002596:	2300      	movs	r3, #0
 8002598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	61bb      	str	r3, [r7, #24]
 800259e:	e003      	b.n	80025a8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80025a4:	2300      	movs	r3, #0
 80025a6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2200      	movs	r2, #0
 80025ac:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 80025b0:	e02a      	b.n	8002608 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	9300      	str	r3, [sp, #0]
 80025b6:	697b      	ldr	r3, [r7, #20]
 80025b8:	2200      	movs	r2, #0
 80025ba:	2180      	movs	r1, #128	; 0x80
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f000 f840 	bl	8002642 <UART_WaitOnFlagUntilTimeout>
 80025c2:	4603      	mov	r3, r0
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d001      	beq.n	80025cc <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80025c8:	2303      	movs	r3, #3
 80025ca:	e036      	b.n	800263a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80025cc:	69fb      	ldr	r3, [r7, #28]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d10b      	bne.n	80025ea <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	881b      	ldrh	r3, [r3, #0]
 80025d6:	461a      	mov	r2, r3
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80025e0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	3302      	adds	r3, #2
 80025e6:	61bb      	str	r3, [r7, #24]
 80025e8:	e007      	b.n	80025fa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	781a      	ldrb	r2, [r3, #0]
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	3301      	adds	r3, #1
 80025f8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80025fe:	b29b      	uxth	r3, r3
 8002600:	3b01      	subs	r3, #1
 8002602:	b29a      	uxth	r2, r3
 8002604:	68fb      	ldr	r3, [r7, #12]
 8002606:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800260c:	b29b      	uxth	r3, r3
 800260e:	2b00      	cmp	r3, #0
 8002610:	d1cf      	bne.n	80025b2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	9300      	str	r3, [sp, #0]
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2200      	movs	r2, #0
 800261a:	2140      	movs	r1, #64	; 0x40
 800261c:	68f8      	ldr	r0, [r7, #12]
 800261e:	f000 f810 	bl	8002642 <UART_WaitOnFlagUntilTimeout>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d001      	beq.n	800262c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8002628:	2303      	movs	r3, #3
 800262a:	e006      	b.n	800263a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	2220      	movs	r2, #32
 8002630:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 8002634:	2300      	movs	r3, #0
 8002636:	e000      	b.n	800263a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002638:	2302      	movs	r3, #2
  }
}
 800263a:	4618      	mov	r0, r3
 800263c:	3720      	adds	r7, #32
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b084      	sub	sp, #16
 8002646:	af00      	add	r7, sp, #0
 8002648:	60f8      	str	r0, [r7, #12]
 800264a:	60b9      	str	r1, [r7, #8]
 800264c:	603b      	str	r3, [r7, #0]
 800264e:	4613      	mov	r3, r2
 8002650:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002652:	e02c      	b.n	80026ae <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800265a:	d028      	beq.n	80026ae <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d007      	beq.n	8002672 <UART_WaitOnFlagUntilTimeout+0x30>
 8002662:	f7fe fc4b 	bl	8000efc <HAL_GetTick>
 8002666:	4602      	mov	r2, r0
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	1ad3      	subs	r3, r2, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	429a      	cmp	r2, r3
 8002670:	d21d      	bcs.n	80026ae <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	68da      	ldr	r2, [r3, #12]
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002680:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	695a      	ldr	r2, [r3, #20]
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f022 0201 	bic.w	r2, r2, #1
 8002690:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2220      	movs	r2, #32
 8002696:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800269a:	68fb      	ldr	r3, [r7, #12]
 800269c:	2220      	movs	r2, #32
 800269e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 80026aa:	2303      	movs	r3, #3
 80026ac:	e00f      	b.n	80026ce <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	681a      	ldr	r2, [r3, #0]
 80026b4:	68bb      	ldr	r3, [r7, #8]
 80026b6:	4013      	ands	r3, r2
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	429a      	cmp	r2, r3
 80026bc:	bf0c      	ite	eq
 80026be:	2301      	moveq	r3, #1
 80026c0:	2300      	movne	r3, #0
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	461a      	mov	r2, r3
 80026c6:	79fb      	ldrb	r3, [r7, #7]
 80026c8:	429a      	cmp	r2, r3
 80026ca:	d0c3      	beq.n	8002654 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80026cc:	2300      	movs	r3, #0
}
 80026ce:	4618      	mov	r0, r3
 80026d0:	3710      	adds	r7, #16
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}
	...

080026d8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b084      	sub	sp, #16
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	691b      	ldr	r3, [r3, #16]
 80026e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	430a      	orrs	r2, r1
 80026f4:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	689a      	ldr	r2, [r3, #8]
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	431a      	orrs	r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	695b      	ldr	r3, [r3, #20]
 8002704:	4313      	orrs	r3, r2
 8002706:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8002712:	f023 030c 	bic.w	r3, r3, #12
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	6812      	ldr	r2, [r2, #0]
 800271a:	68b9      	ldr	r1, [r7, #8]
 800271c:	430b      	orrs	r3, r1
 800271e:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	430a      	orrs	r2, r1
 8002734:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4a2c      	ldr	r2, [pc, #176]	; (80027ec <UART_SetConfig+0x114>)
 800273c:	4293      	cmp	r3, r2
 800273e:	d103      	bne.n	8002748 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002740:	f7ff fa80 	bl	8001c44 <HAL_RCC_GetPCLK2Freq>
 8002744:	60f8      	str	r0, [r7, #12]
 8002746:	e002      	b.n	800274e <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002748:	f7ff fa68 	bl	8001c1c <HAL_RCC_GetPCLK1Freq>
 800274c:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800274e:	68fa      	ldr	r2, [r7, #12]
 8002750:	4613      	mov	r3, r2
 8002752:	009b      	lsls	r3, r3, #2
 8002754:	4413      	add	r3, r2
 8002756:	009a      	lsls	r2, r3, #2
 8002758:	441a      	add	r2, r3
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	fbb2 f3f3 	udiv	r3, r2, r3
 8002764:	4a22      	ldr	r2, [pc, #136]	; (80027f0 <UART_SetConfig+0x118>)
 8002766:	fba2 2303 	umull	r2, r3, r2, r3
 800276a:	095b      	lsrs	r3, r3, #5
 800276c:	0119      	lsls	r1, r3, #4
 800276e:	68fa      	ldr	r2, [r7, #12]
 8002770:	4613      	mov	r3, r2
 8002772:	009b      	lsls	r3, r3, #2
 8002774:	4413      	add	r3, r2
 8002776:	009a      	lsls	r2, r3, #2
 8002778:	441a      	add	r2, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	fbb2 f2f3 	udiv	r2, r2, r3
 8002784:	4b1a      	ldr	r3, [pc, #104]	; (80027f0 <UART_SetConfig+0x118>)
 8002786:	fba3 0302 	umull	r0, r3, r3, r2
 800278a:	095b      	lsrs	r3, r3, #5
 800278c:	2064      	movs	r0, #100	; 0x64
 800278e:	fb00 f303 	mul.w	r3, r0, r3
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	3332      	adds	r3, #50	; 0x32
 8002798:	4a15      	ldr	r2, [pc, #84]	; (80027f0 <UART_SetConfig+0x118>)
 800279a:	fba2 2303 	umull	r2, r3, r2, r3
 800279e:	095b      	lsrs	r3, r3, #5
 80027a0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80027a4:	4419      	add	r1, r3
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	4613      	mov	r3, r2
 80027aa:	009b      	lsls	r3, r3, #2
 80027ac:	4413      	add	r3, r2
 80027ae:	009a      	lsls	r2, r3, #2
 80027b0:	441a      	add	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	fbb2 f2f3 	udiv	r2, r2, r3
 80027bc:	4b0c      	ldr	r3, [pc, #48]	; (80027f0 <UART_SetConfig+0x118>)
 80027be:	fba3 0302 	umull	r0, r3, r3, r2
 80027c2:	095b      	lsrs	r3, r3, #5
 80027c4:	2064      	movs	r0, #100	; 0x64
 80027c6:	fb00 f303 	mul.w	r3, r0, r3
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	011b      	lsls	r3, r3, #4
 80027ce:	3332      	adds	r3, #50	; 0x32
 80027d0:	4a07      	ldr	r2, [pc, #28]	; (80027f0 <UART_SetConfig+0x118>)
 80027d2:	fba2 2303 	umull	r2, r3, r2, r3
 80027d6:	095b      	lsrs	r3, r3, #5
 80027d8:	f003 020f 	and.w	r2, r3, #15
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	440a      	add	r2, r1
 80027e2:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80027e4:	bf00      	nop
 80027e6:	3710      	adds	r7, #16
 80027e8:	46bd      	mov	sp, r7
 80027ea:	bd80      	pop	{r7, pc}
 80027ec:	40013800 	.word	0x40013800
 80027f0:	51eb851f 	.word	0x51eb851f

080027f4 <__errno>:
 80027f4:	4b01      	ldr	r3, [pc, #4]	; (80027fc <__errno+0x8>)
 80027f6:	6818      	ldr	r0, [r3, #0]
 80027f8:	4770      	bx	lr
 80027fa:	bf00      	nop
 80027fc:	20000014 	.word	0x20000014

08002800 <__libc_init_array>:
 8002800:	b570      	push	{r4, r5, r6, lr}
 8002802:	2500      	movs	r5, #0
 8002804:	4e0c      	ldr	r6, [pc, #48]	; (8002838 <__libc_init_array+0x38>)
 8002806:	4c0d      	ldr	r4, [pc, #52]	; (800283c <__libc_init_array+0x3c>)
 8002808:	1ba4      	subs	r4, r4, r6
 800280a:	10a4      	asrs	r4, r4, #2
 800280c:	42a5      	cmp	r5, r4
 800280e:	d109      	bne.n	8002824 <__libc_init_array+0x24>
 8002810:	f000 fc34 	bl	800307c <_init>
 8002814:	2500      	movs	r5, #0
 8002816:	4e0a      	ldr	r6, [pc, #40]	; (8002840 <__libc_init_array+0x40>)
 8002818:	4c0a      	ldr	r4, [pc, #40]	; (8002844 <__libc_init_array+0x44>)
 800281a:	1ba4      	subs	r4, r4, r6
 800281c:	10a4      	asrs	r4, r4, #2
 800281e:	42a5      	cmp	r5, r4
 8002820:	d105      	bne.n	800282e <__libc_init_array+0x2e>
 8002822:	bd70      	pop	{r4, r5, r6, pc}
 8002824:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002828:	4798      	blx	r3
 800282a:	3501      	adds	r5, #1
 800282c:	e7ee      	b.n	800280c <__libc_init_array+0xc>
 800282e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002832:	4798      	blx	r3
 8002834:	3501      	adds	r5, #1
 8002836:	e7f2      	b.n	800281e <__libc_init_array+0x1e>
 8002838:	0800315c 	.word	0x0800315c
 800283c:	0800315c 	.word	0x0800315c
 8002840:	0800315c 	.word	0x0800315c
 8002844:	08003160 	.word	0x08003160

08002848 <memset>:
 8002848:	4603      	mov	r3, r0
 800284a:	4402      	add	r2, r0
 800284c:	4293      	cmp	r3, r2
 800284e:	d100      	bne.n	8002852 <memset+0xa>
 8002850:	4770      	bx	lr
 8002852:	f803 1b01 	strb.w	r1, [r3], #1
 8002856:	e7f9      	b.n	800284c <memset+0x4>

08002858 <siprintf>:
 8002858:	b40e      	push	{r1, r2, r3}
 800285a:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800285e:	b500      	push	{lr}
 8002860:	b09c      	sub	sp, #112	; 0x70
 8002862:	ab1d      	add	r3, sp, #116	; 0x74
 8002864:	9002      	str	r0, [sp, #8]
 8002866:	9006      	str	r0, [sp, #24]
 8002868:	9107      	str	r1, [sp, #28]
 800286a:	9104      	str	r1, [sp, #16]
 800286c:	4808      	ldr	r0, [pc, #32]	; (8002890 <siprintf+0x38>)
 800286e:	4909      	ldr	r1, [pc, #36]	; (8002894 <siprintf+0x3c>)
 8002870:	f853 2b04 	ldr.w	r2, [r3], #4
 8002874:	9105      	str	r1, [sp, #20]
 8002876:	6800      	ldr	r0, [r0, #0]
 8002878:	a902      	add	r1, sp, #8
 800287a:	9301      	str	r3, [sp, #4]
 800287c:	f000 f866 	bl	800294c <_svfiprintf_r>
 8002880:	2200      	movs	r2, #0
 8002882:	9b02      	ldr	r3, [sp, #8]
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	b01c      	add	sp, #112	; 0x70
 8002888:	f85d eb04 	ldr.w	lr, [sp], #4
 800288c:	b003      	add	sp, #12
 800288e:	4770      	bx	lr
 8002890:	20000014 	.word	0x20000014
 8002894:	ffff0208 	.word	0xffff0208

08002898 <__ssputs_r>:
 8002898:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800289c:	688e      	ldr	r6, [r1, #8]
 800289e:	4682      	mov	sl, r0
 80028a0:	429e      	cmp	r6, r3
 80028a2:	460c      	mov	r4, r1
 80028a4:	4690      	mov	r8, r2
 80028a6:	4699      	mov	r9, r3
 80028a8:	d837      	bhi.n	800291a <__ssputs_r+0x82>
 80028aa:	898a      	ldrh	r2, [r1, #12]
 80028ac:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80028b0:	d031      	beq.n	8002916 <__ssputs_r+0x7e>
 80028b2:	2302      	movs	r3, #2
 80028b4:	6825      	ldr	r5, [r4, #0]
 80028b6:	6909      	ldr	r1, [r1, #16]
 80028b8:	1a6f      	subs	r7, r5, r1
 80028ba:	6965      	ldr	r5, [r4, #20]
 80028bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80028c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80028c4:	f109 0301 	add.w	r3, r9, #1
 80028c8:	443b      	add	r3, r7
 80028ca:	429d      	cmp	r5, r3
 80028cc:	bf38      	it	cc
 80028ce:	461d      	movcc	r5, r3
 80028d0:	0553      	lsls	r3, r2, #21
 80028d2:	d530      	bpl.n	8002936 <__ssputs_r+0x9e>
 80028d4:	4629      	mov	r1, r5
 80028d6:	f000 fb37 	bl	8002f48 <_malloc_r>
 80028da:	4606      	mov	r6, r0
 80028dc:	b950      	cbnz	r0, 80028f4 <__ssputs_r+0x5c>
 80028de:	230c      	movs	r3, #12
 80028e0:	f04f 30ff 	mov.w	r0, #4294967295
 80028e4:	f8ca 3000 	str.w	r3, [sl]
 80028e8:	89a3      	ldrh	r3, [r4, #12]
 80028ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028ee:	81a3      	strh	r3, [r4, #12]
 80028f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80028f4:	463a      	mov	r2, r7
 80028f6:	6921      	ldr	r1, [r4, #16]
 80028f8:	f000 fab6 	bl	8002e68 <memcpy>
 80028fc:	89a3      	ldrh	r3, [r4, #12]
 80028fe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8002902:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002906:	81a3      	strh	r3, [r4, #12]
 8002908:	6126      	str	r6, [r4, #16]
 800290a:	443e      	add	r6, r7
 800290c:	6026      	str	r6, [r4, #0]
 800290e:	464e      	mov	r6, r9
 8002910:	6165      	str	r5, [r4, #20]
 8002912:	1bed      	subs	r5, r5, r7
 8002914:	60a5      	str	r5, [r4, #8]
 8002916:	454e      	cmp	r6, r9
 8002918:	d900      	bls.n	800291c <__ssputs_r+0x84>
 800291a:	464e      	mov	r6, r9
 800291c:	4632      	mov	r2, r6
 800291e:	4641      	mov	r1, r8
 8002920:	6820      	ldr	r0, [r4, #0]
 8002922:	f000 faac 	bl	8002e7e <memmove>
 8002926:	68a3      	ldr	r3, [r4, #8]
 8002928:	2000      	movs	r0, #0
 800292a:	1b9b      	subs	r3, r3, r6
 800292c:	60a3      	str	r3, [r4, #8]
 800292e:	6823      	ldr	r3, [r4, #0]
 8002930:	441e      	add	r6, r3
 8002932:	6026      	str	r6, [r4, #0]
 8002934:	e7dc      	b.n	80028f0 <__ssputs_r+0x58>
 8002936:	462a      	mov	r2, r5
 8002938:	f000 fb60 	bl	8002ffc <_realloc_r>
 800293c:	4606      	mov	r6, r0
 800293e:	2800      	cmp	r0, #0
 8002940:	d1e2      	bne.n	8002908 <__ssputs_r+0x70>
 8002942:	6921      	ldr	r1, [r4, #16]
 8002944:	4650      	mov	r0, sl
 8002946:	f000 fab3 	bl	8002eb0 <_free_r>
 800294a:	e7c8      	b.n	80028de <__ssputs_r+0x46>

0800294c <_svfiprintf_r>:
 800294c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002950:	461d      	mov	r5, r3
 8002952:	898b      	ldrh	r3, [r1, #12]
 8002954:	b09d      	sub	sp, #116	; 0x74
 8002956:	061f      	lsls	r7, r3, #24
 8002958:	4680      	mov	r8, r0
 800295a:	460c      	mov	r4, r1
 800295c:	4616      	mov	r6, r2
 800295e:	d50f      	bpl.n	8002980 <_svfiprintf_r+0x34>
 8002960:	690b      	ldr	r3, [r1, #16]
 8002962:	b96b      	cbnz	r3, 8002980 <_svfiprintf_r+0x34>
 8002964:	2140      	movs	r1, #64	; 0x40
 8002966:	f000 faef 	bl	8002f48 <_malloc_r>
 800296a:	6020      	str	r0, [r4, #0]
 800296c:	6120      	str	r0, [r4, #16]
 800296e:	b928      	cbnz	r0, 800297c <_svfiprintf_r+0x30>
 8002970:	230c      	movs	r3, #12
 8002972:	f8c8 3000 	str.w	r3, [r8]
 8002976:	f04f 30ff 	mov.w	r0, #4294967295
 800297a:	e0c8      	b.n	8002b0e <_svfiprintf_r+0x1c2>
 800297c:	2340      	movs	r3, #64	; 0x40
 800297e:	6163      	str	r3, [r4, #20]
 8002980:	2300      	movs	r3, #0
 8002982:	9309      	str	r3, [sp, #36]	; 0x24
 8002984:	2320      	movs	r3, #32
 8002986:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800298a:	2330      	movs	r3, #48	; 0x30
 800298c:	f04f 0b01 	mov.w	fp, #1
 8002990:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002994:	9503      	str	r5, [sp, #12]
 8002996:	4637      	mov	r7, r6
 8002998:	463d      	mov	r5, r7
 800299a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800299e:	b10b      	cbz	r3, 80029a4 <_svfiprintf_r+0x58>
 80029a0:	2b25      	cmp	r3, #37	; 0x25
 80029a2:	d13e      	bne.n	8002a22 <_svfiprintf_r+0xd6>
 80029a4:	ebb7 0a06 	subs.w	sl, r7, r6
 80029a8:	d00b      	beq.n	80029c2 <_svfiprintf_r+0x76>
 80029aa:	4653      	mov	r3, sl
 80029ac:	4632      	mov	r2, r6
 80029ae:	4621      	mov	r1, r4
 80029b0:	4640      	mov	r0, r8
 80029b2:	f7ff ff71 	bl	8002898 <__ssputs_r>
 80029b6:	3001      	adds	r0, #1
 80029b8:	f000 80a4 	beq.w	8002b04 <_svfiprintf_r+0x1b8>
 80029bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80029be:	4453      	add	r3, sl
 80029c0:	9309      	str	r3, [sp, #36]	; 0x24
 80029c2:	783b      	ldrb	r3, [r7, #0]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	f000 809d 	beq.w	8002b04 <_svfiprintf_r+0x1b8>
 80029ca:	2300      	movs	r3, #0
 80029cc:	f04f 32ff 	mov.w	r2, #4294967295
 80029d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80029d4:	9304      	str	r3, [sp, #16]
 80029d6:	9307      	str	r3, [sp, #28]
 80029d8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80029dc:	931a      	str	r3, [sp, #104]	; 0x68
 80029de:	462f      	mov	r7, r5
 80029e0:	2205      	movs	r2, #5
 80029e2:	f817 1b01 	ldrb.w	r1, [r7], #1
 80029e6:	4850      	ldr	r0, [pc, #320]	; (8002b28 <_svfiprintf_r+0x1dc>)
 80029e8:	f000 fa30 	bl	8002e4c <memchr>
 80029ec:	9b04      	ldr	r3, [sp, #16]
 80029ee:	b9d0      	cbnz	r0, 8002a26 <_svfiprintf_r+0xda>
 80029f0:	06d9      	lsls	r1, r3, #27
 80029f2:	bf44      	itt	mi
 80029f4:	2220      	movmi	r2, #32
 80029f6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80029fa:	071a      	lsls	r2, r3, #28
 80029fc:	bf44      	itt	mi
 80029fe:	222b      	movmi	r2, #43	; 0x2b
 8002a00:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002a04:	782a      	ldrb	r2, [r5, #0]
 8002a06:	2a2a      	cmp	r2, #42	; 0x2a
 8002a08:	d015      	beq.n	8002a36 <_svfiprintf_r+0xea>
 8002a0a:	462f      	mov	r7, r5
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	250a      	movs	r5, #10
 8002a10:	9a07      	ldr	r2, [sp, #28]
 8002a12:	4639      	mov	r1, r7
 8002a14:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002a18:	3b30      	subs	r3, #48	; 0x30
 8002a1a:	2b09      	cmp	r3, #9
 8002a1c:	d94d      	bls.n	8002aba <_svfiprintf_r+0x16e>
 8002a1e:	b1b8      	cbz	r0, 8002a50 <_svfiprintf_r+0x104>
 8002a20:	e00f      	b.n	8002a42 <_svfiprintf_r+0xf6>
 8002a22:	462f      	mov	r7, r5
 8002a24:	e7b8      	b.n	8002998 <_svfiprintf_r+0x4c>
 8002a26:	4a40      	ldr	r2, [pc, #256]	; (8002b28 <_svfiprintf_r+0x1dc>)
 8002a28:	463d      	mov	r5, r7
 8002a2a:	1a80      	subs	r0, r0, r2
 8002a2c:	fa0b f000 	lsl.w	r0, fp, r0
 8002a30:	4318      	orrs	r0, r3
 8002a32:	9004      	str	r0, [sp, #16]
 8002a34:	e7d3      	b.n	80029de <_svfiprintf_r+0x92>
 8002a36:	9a03      	ldr	r2, [sp, #12]
 8002a38:	1d11      	adds	r1, r2, #4
 8002a3a:	6812      	ldr	r2, [r2, #0]
 8002a3c:	9103      	str	r1, [sp, #12]
 8002a3e:	2a00      	cmp	r2, #0
 8002a40:	db01      	blt.n	8002a46 <_svfiprintf_r+0xfa>
 8002a42:	9207      	str	r2, [sp, #28]
 8002a44:	e004      	b.n	8002a50 <_svfiprintf_r+0x104>
 8002a46:	4252      	negs	r2, r2
 8002a48:	f043 0302 	orr.w	r3, r3, #2
 8002a4c:	9207      	str	r2, [sp, #28]
 8002a4e:	9304      	str	r3, [sp, #16]
 8002a50:	783b      	ldrb	r3, [r7, #0]
 8002a52:	2b2e      	cmp	r3, #46	; 0x2e
 8002a54:	d10c      	bne.n	8002a70 <_svfiprintf_r+0x124>
 8002a56:	787b      	ldrb	r3, [r7, #1]
 8002a58:	2b2a      	cmp	r3, #42	; 0x2a
 8002a5a:	d133      	bne.n	8002ac4 <_svfiprintf_r+0x178>
 8002a5c:	9b03      	ldr	r3, [sp, #12]
 8002a5e:	3702      	adds	r7, #2
 8002a60:	1d1a      	adds	r2, r3, #4
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	9203      	str	r2, [sp, #12]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	bfb8      	it	lt
 8002a6a:	f04f 33ff 	movlt.w	r3, #4294967295
 8002a6e:	9305      	str	r3, [sp, #20]
 8002a70:	4d2e      	ldr	r5, [pc, #184]	; (8002b2c <_svfiprintf_r+0x1e0>)
 8002a72:	2203      	movs	r2, #3
 8002a74:	7839      	ldrb	r1, [r7, #0]
 8002a76:	4628      	mov	r0, r5
 8002a78:	f000 f9e8 	bl	8002e4c <memchr>
 8002a7c:	b138      	cbz	r0, 8002a8e <_svfiprintf_r+0x142>
 8002a7e:	2340      	movs	r3, #64	; 0x40
 8002a80:	1b40      	subs	r0, r0, r5
 8002a82:	fa03 f000 	lsl.w	r0, r3, r0
 8002a86:	9b04      	ldr	r3, [sp, #16]
 8002a88:	3701      	adds	r7, #1
 8002a8a:	4303      	orrs	r3, r0
 8002a8c:	9304      	str	r3, [sp, #16]
 8002a8e:	7839      	ldrb	r1, [r7, #0]
 8002a90:	2206      	movs	r2, #6
 8002a92:	4827      	ldr	r0, [pc, #156]	; (8002b30 <_svfiprintf_r+0x1e4>)
 8002a94:	1c7e      	adds	r6, r7, #1
 8002a96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002a9a:	f000 f9d7 	bl	8002e4c <memchr>
 8002a9e:	2800      	cmp	r0, #0
 8002aa0:	d038      	beq.n	8002b14 <_svfiprintf_r+0x1c8>
 8002aa2:	4b24      	ldr	r3, [pc, #144]	; (8002b34 <_svfiprintf_r+0x1e8>)
 8002aa4:	bb13      	cbnz	r3, 8002aec <_svfiprintf_r+0x1a0>
 8002aa6:	9b03      	ldr	r3, [sp, #12]
 8002aa8:	3307      	adds	r3, #7
 8002aaa:	f023 0307 	bic.w	r3, r3, #7
 8002aae:	3308      	adds	r3, #8
 8002ab0:	9303      	str	r3, [sp, #12]
 8002ab2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002ab4:	444b      	add	r3, r9
 8002ab6:	9309      	str	r3, [sp, #36]	; 0x24
 8002ab8:	e76d      	b.n	8002996 <_svfiprintf_r+0x4a>
 8002aba:	fb05 3202 	mla	r2, r5, r2, r3
 8002abe:	2001      	movs	r0, #1
 8002ac0:	460f      	mov	r7, r1
 8002ac2:	e7a6      	b.n	8002a12 <_svfiprintf_r+0xc6>
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	250a      	movs	r5, #10
 8002ac8:	4619      	mov	r1, r3
 8002aca:	3701      	adds	r7, #1
 8002acc:	9305      	str	r3, [sp, #20]
 8002ace:	4638      	mov	r0, r7
 8002ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002ad4:	3a30      	subs	r2, #48	; 0x30
 8002ad6:	2a09      	cmp	r2, #9
 8002ad8:	d903      	bls.n	8002ae2 <_svfiprintf_r+0x196>
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d0c8      	beq.n	8002a70 <_svfiprintf_r+0x124>
 8002ade:	9105      	str	r1, [sp, #20]
 8002ae0:	e7c6      	b.n	8002a70 <_svfiprintf_r+0x124>
 8002ae2:	fb05 2101 	mla	r1, r5, r1, r2
 8002ae6:	2301      	movs	r3, #1
 8002ae8:	4607      	mov	r7, r0
 8002aea:	e7f0      	b.n	8002ace <_svfiprintf_r+0x182>
 8002aec:	ab03      	add	r3, sp, #12
 8002aee:	9300      	str	r3, [sp, #0]
 8002af0:	4622      	mov	r2, r4
 8002af2:	4b11      	ldr	r3, [pc, #68]	; (8002b38 <_svfiprintf_r+0x1ec>)
 8002af4:	a904      	add	r1, sp, #16
 8002af6:	4640      	mov	r0, r8
 8002af8:	f3af 8000 	nop.w
 8002afc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002b00:	4681      	mov	r9, r0
 8002b02:	d1d6      	bne.n	8002ab2 <_svfiprintf_r+0x166>
 8002b04:	89a3      	ldrh	r3, [r4, #12]
 8002b06:	065b      	lsls	r3, r3, #25
 8002b08:	f53f af35 	bmi.w	8002976 <_svfiprintf_r+0x2a>
 8002b0c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002b0e:	b01d      	add	sp, #116	; 0x74
 8002b10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002b14:	ab03      	add	r3, sp, #12
 8002b16:	9300      	str	r3, [sp, #0]
 8002b18:	4622      	mov	r2, r4
 8002b1a:	4b07      	ldr	r3, [pc, #28]	; (8002b38 <_svfiprintf_r+0x1ec>)
 8002b1c:	a904      	add	r1, sp, #16
 8002b1e:	4640      	mov	r0, r8
 8002b20:	f000 f882 	bl	8002c28 <_printf_i>
 8002b24:	e7ea      	b.n	8002afc <_svfiprintf_r+0x1b0>
 8002b26:	bf00      	nop
 8002b28:	08003128 	.word	0x08003128
 8002b2c:	0800312e 	.word	0x0800312e
 8002b30:	08003132 	.word	0x08003132
 8002b34:	00000000 	.word	0x00000000
 8002b38:	08002899 	.word	0x08002899

08002b3c <_printf_common>:
 8002b3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002b40:	4691      	mov	r9, r2
 8002b42:	461f      	mov	r7, r3
 8002b44:	688a      	ldr	r2, [r1, #8]
 8002b46:	690b      	ldr	r3, [r1, #16]
 8002b48:	4606      	mov	r6, r0
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	bfb8      	it	lt
 8002b4e:	4613      	movlt	r3, r2
 8002b50:	f8c9 3000 	str.w	r3, [r9]
 8002b54:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002b58:	460c      	mov	r4, r1
 8002b5a:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002b5e:	b112      	cbz	r2, 8002b66 <_printf_common+0x2a>
 8002b60:	3301      	adds	r3, #1
 8002b62:	f8c9 3000 	str.w	r3, [r9]
 8002b66:	6823      	ldr	r3, [r4, #0]
 8002b68:	0699      	lsls	r1, r3, #26
 8002b6a:	bf42      	ittt	mi
 8002b6c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002b70:	3302      	addmi	r3, #2
 8002b72:	f8c9 3000 	strmi.w	r3, [r9]
 8002b76:	6825      	ldr	r5, [r4, #0]
 8002b78:	f015 0506 	ands.w	r5, r5, #6
 8002b7c:	d107      	bne.n	8002b8e <_printf_common+0x52>
 8002b7e:	f104 0a19 	add.w	sl, r4, #25
 8002b82:	68e3      	ldr	r3, [r4, #12]
 8002b84:	f8d9 2000 	ldr.w	r2, [r9]
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	42ab      	cmp	r3, r5
 8002b8c:	dc29      	bgt.n	8002be2 <_printf_common+0xa6>
 8002b8e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002b92:	6822      	ldr	r2, [r4, #0]
 8002b94:	3300      	adds	r3, #0
 8002b96:	bf18      	it	ne
 8002b98:	2301      	movne	r3, #1
 8002b9a:	0692      	lsls	r2, r2, #26
 8002b9c:	d42e      	bmi.n	8002bfc <_printf_common+0xc0>
 8002b9e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ba2:	4639      	mov	r1, r7
 8002ba4:	4630      	mov	r0, r6
 8002ba6:	47c0      	blx	r8
 8002ba8:	3001      	adds	r0, #1
 8002baa:	d021      	beq.n	8002bf0 <_printf_common+0xb4>
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	68e5      	ldr	r5, [r4, #12]
 8002bb0:	f003 0306 	and.w	r3, r3, #6
 8002bb4:	2b04      	cmp	r3, #4
 8002bb6:	bf18      	it	ne
 8002bb8:	2500      	movne	r5, #0
 8002bba:	f8d9 2000 	ldr.w	r2, [r9]
 8002bbe:	f04f 0900 	mov.w	r9, #0
 8002bc2:	bf08      	it	eq
 8002bc4:	1aad      	subeq	r5, r5, r2
 8002bc6:	68a3      	ldr	r3, [r4, #8]
 8002bc8:	6922      	ldr	r2, [r4, #16]
 8002bca:	bf08      	it	eq
 8002bcc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	bfc4      	itt	gt
 8002bd4:	1a9b      	subgt	r3, r3, r2
 8002bd6:	18ed      	addgt	r5, r5, r3
 8002bd8:	341a      	adds	r4, #26
 8002bda:	454d      	cmp	r5, r9
 8002bdc:	d11a      	bne.n	8002c14 <_printf_common+0xd8>
 8002bde:	2000      	movs	r0, #0
 8002be0:	e008      	b.n	8002bf4 <_printf_common+0xb8>
 8002be2:	2301      	movs	r3, #1
 8002be4:	4652      	mov	r2, sl
 8002be6:	4639      	mov	r1, r7
 8002be8:	4630      	mov	r0, r6
 8002bea:	47c0      	blx	r8
 8002bec:	3001      	adds	r0, #1
 8002bee:	d103      	bne.n	8002bf8 <_printf_common+0xbc>
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8002bf8:	3501      	adds	r5, #1
 8002bfa:	e7c2      	b.n	8002b82 <_printf_common+0x46>
 8002bfc:	2030      	movs	r0, #48	; 0x30
 8002bfe:	18e1      	adds	r1, r4, r3
 8002c00:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8002c04:	1c5a      	adds	r2, r3, #1
 8002c06:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8002c0a:	4422      	add	r2, r4
 8002c0c:	3302      	adds	r3, #2
 8002c0e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8002c12:	e7c4      	b.n	8002b9e <_printf_common+0x62>
 8002c14:	2301      	movs	r3, #1
 8002c16:	4622      	mov	r2, r4
 8002c18:	4639      	mov	r1, r7
 8002c1a:	4630      	mov	r0, r6
 8002c1c:	47c0      	blx	r8
 8002c1e:	3001      	adds	r0, #1
 8002c20:	d0e6      	beq.n	8002bf0 <_printf_common+0xb4>
 8002c22:	f109 0901 	add.w	r9, r9, #1
 8002c26:	e7d8      	b.n	8002bda <_printf_common+0x9e>

08002c28 <_printf_i>:
 8002c28:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002c2c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8002c30:	460c      	mov	r4, r1
 8002c32:	7e09      	ldrb	r1, [r1, #24]
 8002c34:	b085      	sub	sp, #20
 8002c36:	296e      	cmp	r1, #110	; 0x6e
 8002c38:	4617      	mov	r7, r2
 8002c3a:	4606      	mov	r6, r0
 8002c3c:	4698      	mov	r8, r3
 8002c3e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002c40:	f000 80b3 	beq.w	8002daa <_printf_i+0x182>
 8002c44:	d822      	bhi.n	8002c8c <_printf_i+0x64>
 8002c46:	2963      	cmp	r1, #99	; 0x63
 8002c48:	d036      	beq.n	8002cb8 <_printf_i+0x90>
 8002c4a:	d80a      	bhi.n	8002c62 <_printf_i+0x3a>
 8002c4c:	2900      	cmp	r1, #0
 8002c4e:	f000 80b9 	beq.w	8002dc4 <_printf_i+0x19c>
 8002c52:	2958      	cmp	r1, #88	; 0x58
 8002c54:	f000 8083 	beq.w	8002d5e <_printf_i+0x136>
 8002c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002c5c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8002c60:	e032      	b.n	8002cc8 <_printf_i+0xa0>
 8002c62:	2964      	cmp	r1, #100	; 0x64
 8002c64:	d001      	beq.n	8002c6a <_printf_i+0x42>
 8002c66:	2969      	cmp	r1, #105	; 0x69
 8002c68:	d1f6      	bne.n	8002c58 <_printf_i+0x30>
 8002c6a:	6820      	ldr	r0, [r4, #0]
 8002c6c:	6813      	ldr	r3, [r2, #0]
 8002c6e:	0605      	lsls	r5, r0, #24
 8002c70:	f103 0104 	add.w	r1, r3, #4
 8002c74:	d52a      	bpl.n	8002ccc <_printf_i+0xa4>
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6011      	str	r1, [r2, #0]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	da03      	bge.n	8002c86 <_printf_i+0x5e>
 8002c7e:	222d      	movs	r2, #45	; 0x2d
 8002c80:	425b      	negs	r3, r3
 8002c82:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8002c86:	486f      	ldr	r0, [pc, #444]	; (8002e44 <_printf_i+0x21c>)
 8002c88:	220a      	movs	r2, #10
 8002c8a:	e039      	b.n	8002d00 <_printf_i+0xd8>
 8002c8c:	2973      	cmp	r1, #115	; 0x73
 8002c8e:	f000 809d 	beq.w	8002dcc <_printf_i+0x1a4>
 8002c92:	d808      	bhi.n	8002ca6 <_printf_i+0x7e>
 8002c94:	296f      	cmp	r1, #111	; 0x6f
 8002c96:	d020      	beq.n	8002cda <_printf_i+0xb2>
 8002c98:	2970      	cmp	r1, #112	; 0x70
 8002c9a:	d1dd      	bne.n	8002c58 <_printf_i+0x30>
 8002c9c:	6823      	ldr	r3, [r4, #0]
 8002c9e:	f043 0320 	orr.w	r3, r3, #32
 8002ca2:	6023      	str	r3, [r4, #0]
 8002ca4:	e003      	b.n	8002cae <_printf_i+0x86>
 8002ca6:	2975      	cmp	r1, #117	; 0x75
 8002ca8:	d017      	beq.n	8002cda <_printf_i+0xb2>
 8002caa:	2978      	cmp	r1, #120	; 0x78
 8002cac:	d1d4      	bne.n	8002c58 <_printf_i+0x30>
 8002cae:	2378      	movs	r3, #120	; 0x78
 8002cb0:	4865      	ldr	r0, [pc, #404]	; (8002e48 <_printf_i+0x220>)
 8002cb2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8002cb6:	e055      	b.n	8002d64 <_printf_i+0x13c>
 8002cb8:	6813      	ldr	r3, [r2, #0]
 8002cba:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002cbe:	1d19      	adds	r1, r3, #4
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6011      	str	r1, [r2, #0]
 8002cc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e08c      	b.n	8002de6 <_printf_i+0x1be>
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002cd2:	6011      	str	r1, [r2, #0]
 8002cd4:	bf18      	it	ne
 8002cd6:	b21b      	sxthne	r3, r3
 8002cd8:	e7cf      	b.n	8002c7a <_printf_i+0x52>
 8002cda:	6813      	ldr	r3, [r2, #0]
 8002cdc:	6825      	ldr	r5, [r4, #0]
 8002cde:	1d18      	adds	r0, r3, #4
 8002ce0:	6010      	str	r0, [r2, #0]
 8002ce2:	0628      	lsls	r0, r5, #24
 8002ce4:	d501      	bpl.n	8002cea <_printf_i+0xc2>
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	e002      	b.n	8002cf0 <_printf_i+0xc8>
 8002cea:	0668      	lsls	r0, r5, #25
 8002cec:	d5fb      	bpl.n	8002ce6 <_printf_i+0xbe>
 8002cee:	881b      	ldrh	r3, [r3, #0]
 8002cf0:	296f      	cmp	r1, #111	; 0x6f
 8002cf2:	bf14      	ite	ne
 8002cf4:	220a      	movne	r2, #10
 8002cf6:	2208      	moveq	r2, #8
 8002cf8:	4852      	ldr	r0, [pc, #328]	; (8002e44 <_printf_i+0x21c>)
 8002cfa:	2100      	movs	r1, #0
 8002cfc:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8002d00:	6865      	ldr	r5, [r4, #4]
 8002d02:	2d00      	cmp	r5, #0
 8002d04:	60a5      	str	r5, [r4, #8]
 8002d06:	f2c0 8095 	blt.w	8002e34 <_printf_i+0x20c>
 8002d0a:	6821      	ldr	r1, [r4, #0]
 8002d0c:	f021 0104 	bic.w	r1, r1, #4
 8002d10:	6021      	str	r1, [r4, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d13d      	bne.n	8002d92 <_printf_i+0x16a>
 8002d16:	2d00      	cmp	r5, #0
 8002d18:	f040 808e 	bne.w	8002e38 <_printf_i+0x210>
 8002d1c:	4665      	mov	r5, ip
 8002d1e:	2a08      	cmp	r2, #8
 8002d20:	d10b      	bne.n	8002d3a <_printf_i+0x112>
 8002d22:	6823      	ldr	r3, [r4, #0]
 8002d24:	07db      	lsls	r3, r3, #31
 8002d26:	d508      	bpl.n	8002d3a <_printf_i+0x112>
 8002d28:	6923      	ldr	r3, [r4, #16]
 8002d2a:	6862      	ldr	r2, [r4, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	bfde      	ittt	le
 8002d30:	2330      	movle	r3, #48	; 0x30
 8002d32:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002d36:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002d3a:	ebac 0305 	sub.w	r3, ip, r5
 8002d3e:	6123      	str	r3, [r4, #16]
 8002d40:	f8cd 8000 	str.w	r8, [sp]
 8002d44:	463b      	mov	r3, r7
 8002d46:	aa03      	add	r2, sp, #12
 8002d48:	4621      	mov	r1, r4
 8002d4a:	4630      	mov	r0, r6
 8002d4c:	f7ff fef6 	bl	8002b3c <_printf_common>
 8002d50:	3001      	adds	r0, #1
 8002d52:	d14d      	bne.n	8002df0 <_printf_i+0x1c8>
 8002d54:	f04f 30ff 	mov.w	r0, #4294967295
 8002d58:	b005      	add	sp, #20
 8002d5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002d5e:	4839      	ldr	r0, [pc, #228]	; (8002e44 <_printf_i+0x21c>)
 8002d60:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8002d64:	6813      	ldr	r3, [r2, #0]
 8002d66:	6821      	ldr	r1, [r4, #0]
 8002d68:	1d1d      	adds	r5, r3, #4
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	6015      	str	r5, [r2, #0]
 8002d6e:	060a      	lsls	r2, r1, #24
 8002d70:	d50b      	bpl.n	8002d8a <_printf_i+0x162>
 8002d72:	07ca      	lsls	r2, r1, #31
 8002d74:	bf44      	itt	mi
 8002d76:	f041 0120 	orrmi.w	r1, r1, #32
 8002d7a:	6021      	strmi	r1, [r4, #0]
 8002d7c:	b91b      	cbnz	r3, 8002d86 <_printf_i+0x15e>
 8002d7e:	6822      	ldr	r2, [r4, #0]
 8002d80:	f022 0220 	bic.w	r2, r2, #32
 8002d84:	6022      	str	r2, [r4, #0]
 8002d86:	2210      	movs	r2, #16
 8002d88:	e7b7      	b.n	8002cfa <_printf_i+0xd2>
 8002d8a:	064d      	lsls	r5, r1, #25
 8002d8c:	bf48      	it	mi
 8002d8e:	b29b      	uxthmi	r3, r3
 8002d90:	e7ef      	b.n	8002d72 <_printf_i+0x14a>
 8002d92:	4665      	mov	r5, ip
 8002d94:	fbb3 f1f2 	udiv	r1, r3, r2
 8002d98:	fb02 3311 	mls	r3, r2, r1, r3
 8002d9c:	5cc3      	ldrb	r3, [r0, r3]
 8002d9e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002da2:	460b      	mov	r3, r1
 8002da4:	2900      	cmp	r1, #0
 8002da6:	d1f5      	bne.n	8002d94 <_printf_i+0x16c>
 8002da8:	e7b9      	b.n	8002d1e <_printf_i+0xf6>
 8002daa:	6813      	ldr	r3, [r2, #0]
 8002dac:	6825      	ldr	r5, [r4, #0]
 8002dae:	1d18      	adds	r0, r3, #4
 8002db0:	6961      	ldr	r1, [r4, #20]
 8002db2:	6010      	str	r0, [r2, #0]
 8002db4:	0628      	lsls	r0, r5, #24
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	d501      	bpl.n	8002dbe <_printf_i+0x196>
 8002dba:	6019      	str	r1, [r3, #0]
 8002dbc:	e002      	b.n	8002dc4 <_printf_i+0x19c>
 8002dbe:	066a      	lsls	r2, r5, #25
 8002dc0:	d5fb      	bpl.n	8002dba <_printf_i+0x192>
 8002dc2:	8019      	strh	r1, [r3, #0]
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	4665      	mov	r5, ip
 8002dc8:	6123      	str	r3, [r4, #16]
 8002dca:	e7b9      	b.n	8002d40 <_printf_i+0x118>
 8002dcc:	6813      	ldr	r3, [r2, #0]
 8002dce:	1d19      	adds	r1, r3, #4
 8002dd0:	6011      	str	r1, [r2, #0]
 8002dd2:	681d      	ldr	r5, [r3, #0]
 8002dd4:	6862      	ldr	r2, [r4, #4]
 8002dd6:	2100      	movs	r1, #0
 8002dd8:	4628      	mov	r0, r5
 8002dda:	f000 f837 	bl	8002e4c <memchr>
 8002dde:	b108      	cbz	r0, 8002de4 <_printf_i+0x1bc>
 8002de0:	1b40      	subs	r0, r0, r5
 8002de2:	6060      	str	r0, [r4, #4]
 8002de4:	6863      	ldr	r3, [r4, #4]
 8002de6:	6123      	str	r3, [r4, #16]
 8002de8:	2300      	movs	r3, #0
 8002dea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002dee:	e7a7      	b.n	8002d40 <_printf_i+0x118>
 8002df0:	6923      	ldr	r3, [r4, #16]
 8002df2:	462a      	mov	r2, r5
 8002df4:	4639      	mov	r1, r7
 8002df6:	4630      	mov	r0, r6
 8002df8:	47c0      	blx	r8
 8002dfa:	3001      	adds	r0, #1
 8002dfc:	d0aa      	beq.n	8002d54 <_printf_i+0x12c>
 8002dfe:	6823      	ldr	r3, [r4, #0]
 8002e00:	079b      	lsls	r3, r3, #30
 8002e02:	d413      	bmi.n	8002e2c <_printf_i+0x204>
 8002e04:	68e0      	ldr	r0, [r4, #12]
 8002e06:	9b03      	ldr	r3, [sp, #12]
 8002e08:	4298      	cmp	r0, r3
 8002e0a:	bfb8      	it	lt
 8002e0c:	4618      	movlt	r0, r3
 8002e0e:	e7a3      	b.n	8002d58 <_printf_i+0x130>
 8002e10:	2301      	movs	r3, #1
 8002e12:	464a      	mov	r2, r9
 8002e14:	4639      	mov	r1, r7
 8002e16:	4630      	mov	r0, r6
 8002e18:	47c0      	blx	r8
 8002e1a:	3001      	adds	r0, #1
 8002e1c:	d09a      	beq.n	8002d54 <_printf_i+0x12c>
 8002e1e:	3501      	adds	r5, #1
 8002e20:	68e3      	ldr	r3, [r4, #12]
 8002e22:	9a03      	ldr	r2, [sp, #12]
 8002e24:	1a9b      	subs	r3, r3, r2
 8002e26:	42ab      	cmp	r3, r5
 8002e28:	dcf2      	bgt.n	8002e10 <_printf_i+0x1e8>
 8002e2a:	e7eb      	b.n	8002e04 <_printf_i+0x1dc>
 8002e2c:	2500      	movs	r5, #0
 8002e2e:	f104 0919 	add.w	r9, r4, #25
 8002e32:	e7f5      	b.n	8002e20 <_printf_i+0x1f8>
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1ac      	bne.n	8002d92 <_printf_i+0x16a>
 8002e38:	7803      	ldrb	r3, [r0, #0]
 8002e3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002e3e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002e42:	e76c      	b.n	8002d1e <_printf_i+0xf6>
 8002e44:	08003139 	.word	0x08003139
 8002e48:	0800314a 	.word	0x0800314a

08002e4c <memchr>:
 8002e4c:	b510      	push	{r4, lr}
 8002e4e:	b2c9      	uxtb	r1, r1
 8002e50:	4402      	add	r2, r0
 8002e52:	4290      	cmp	r0, r2
 8002e54:	4603      	mov	r3, r0
 8002e56:	d101      	bne.n	8002e5c <memchr+0x10>
 8002e58:	2300      	movs	r3, #0
 8002e5a:	e003      	b.n	8002e64 <memchr+0x18>
 8002e5c:	781c      	ldrb	r4, [r3, #0]
 8002e5e:	3001      	adds	r0, #1
 8002e60:	428c      	cmp	r4, r1
 8002e62:	d1f6      	bne.n	8002e52 <memchr+0x6>
 8002e64:	4618      	mov	r0, r3
 8002e66:	bd10      	pop	{r4, pc}

08002e68 <memcpy>:
 8002e68:	b510      	push	{r4, lr}
 8002e6a:	1e43      	subs	r3, r0, #1
 8002e6c:	440a      	add	r2, r1
 8002e6e:	4291      	cmp	r1, r2
 8002e70:	d100      	bne.n	8002e74 <memcpy+0xc>
 8002e72:	bd10      	pop	{r4, pc}
 8002e74:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e78:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002e7c:	e7f7      	b.n	8002e6e <memcpy+0x6>

08002e7e <memmove>:
 8002e7e:	4288      	cmp	r0, r1
 8002e80:	b510      	push	{r4, lr}
 8002e82:	eb01 0302 	add.w	r3, r1, r2
 8002e86:	d807      	bhi.n	8002e98 <memmove+0x1a>
 8002e88:	1e42      	subs	r2, r0, #1
 8002e8a:	4299      	cmp	r1, r3
 8002e8c:	d00a      	beq.n	8002ea4 <memmove+0x26>
 8002e8e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002e92:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002e96:	e7f8      	b.n	8002e8a <memmove+0xc>
 8002e98:	4283      	cmp	r3, r0
 8002e9a:	d9f5      	bls.n	8002e88 <memmove+0xa>
 8002e9c:	1881      	adds	r1, r0, r2
 8002e9e:	1ad2      	subs	r2, r2, r3
 8002ea0:	42d3      	cmn	r3, r2
 8002ea2:	d100      	bne.n	8002ea6 <memmove+0x28>
 8002ea4:	bd10      	pop	{r4, pc}
 8002ea6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002eaa:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002eae:	e7f7      	b.n	8002ea0 <memmove+0x22>

08002eb0 <_free_r>:
 8002eb0:	b538      	push	{r3, r4, r5, lr}
 8002eb2:	4605      	mov	r5, r0
 8002eb4:	2900      	cmp	r1, #0
 8002eb6:	d043      	beq.n	8002f40 <_free_r+0x90>
 8002eb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002ebc:	1f0c      	subs	r4, r1, #4
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	bfb8      	it	lt
 8002ec2:	18e4      	addlt	r4, r4, r3
 8002ec4:	f000 f8d0 	bl	8003068 <__malloc_lock>
 8002ec8:	4a1e      	ldr	r2, [pc, #120]	; (8002f44 <_free_r+0x94>)
 8002eca:	6813      	ldr	r3, [r2, #0]
 8002ecc:	4610      	mov	r0, r2
 8002ece:	b933      	cbnz	r3, 8002ede <_free_r+0x2e>
 8002ed0:	6063      	str	r3, [r4, #4]
 8002ed2:	6014      	str	r4, [r2, #0]
 8002ed4:	4628      	mov	r0, r5
 8002ed6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002eda:	f000 b8c6 	b.w	800306a <__malloc_unlock>
 8002ede:	42a3      	cmp	r3, r4
 8002ee0:	d90b      	bls.n	8002efa <_free_r+0x4a>
 8002ee2:	6821      	ldr	r1, [r4, #0]
 8002ee4:	1862      	adds	r2, r4, r1
 8002ee6:	4293      	cmp	r3, r2
 8002ee8:	bf01      	itttt	eq
 8002eea:	681a      	ldreq	r2, [r3, #0]
 8002eec:	685b      	ldreq	r3, [r3, #4]
 8002eee:	1852      	addeq	r2, r2, r1
 8002ef0:	6022      	streq	r2, [r4, #0]
 8002ef2:	6063      	str	r3, [r4, #4]
 8002ef4:	6004      	str	r4, [r0, #0]
 8002ef6:	e7ed      	b.n	8002ed4 <_free_r+0x24>
 8002ef8:	4613      	mov	r3, r2
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	b10a      	cbz	r2, 8002f02 <_free_r+0x52>
 8002efe:	42a2      	cmp	r2, r4
 8002f00:	d9fa      	bls.n	8002ef8 <_free_r+0x48>
 8002f02:	6819      	ldr	r1, [r3, #0]
 8002f04:	1858      	adds	r0, r3, r1
 8002f06:	42a0      	cmp	r0, r4
 8002f08:	d10b      	bne.n	8002f22 <_free_r+0x72>
 8002f0a:	6820      	ldr	r0, [r4, #0]
 8002f0c:	4401      	add	r1, r0
 8002f0e:	1858      	adds	r0, r3, r1
 8002f10:	4282      	cmp	r2, r0
 8002f12:	6019      	str	r1, [r3, #0]
 8002f14:	d1de      	bne.n	8002ed4 <_free_r+0x24>
 8002f16:	6810      	ldr	r0, [r2, #0]
 8002f18:	6852      	ldr	r2, [r2, #4]
 8002f1a:	4401      	add	r1, r0
 8002f1c:	6019      	str	r1, [r3, #0]
 8002f1e:	605a      	str	r2, [r3, #4]
 8002f20:	e7d8      	b.n	8002ed4 <_free_r+0x24>
 8002f22:	d902      	bls.n	8002f2a <_free_r+0x7a>
 8002f24:	230c      	movs	r3, #12
 8002f26:	602b      	str	r3, [r5, #0]
 8002f28:	e7d4      	b.n	8002ed4 <_free_r+0x24>
 8002f2a:	6820      	ldr	r0, [r4, #0]
 8002f2c:	1821      	adds	r1, r4, r0
 8002f2e:	428a      	cmp	r2, r1
 8002f30:	bf01      	itttt	eq
 8002f32:	6811      	ldreq	r1, [r2, #0]
 8002f34:	6852      	ldreq	r2, [r2, #4]
 8002f36:	1809      	addeq	r1, r1, r0
 8002f38:	6021      	streq	r1, [r4, #0]
 8002f3a:	6062      	str	r2, [r4, #4]
 8002f3c:	605c      	str	r4, [r3, #4]
 8002f3e:	e7c9      	b.n	8002ed4 <_free_r+0x24>
 8002f40:	bd38      	pop	{r3, r4, r5, pc}
 8002f42:	bf00      	nop
 8002f44:	200000c4 	.word	0x200000c4

08002f48 <_malloc_r>:
 8002f48:	b570      	push	{r4, r5, r6, lr}
 8002f4a:	1ccd      	adds	r5, r1, #3
 8002f4c:	f025 0503 	bic.w	r5, r5, #3
 8002f50:	3508      	adds	r5, #8
 8002f52:	2d0c      	cmp	r5, #12
 8002f54:	bf38      	it	cc
 8002f56:	250c      	movcc	r5, #12
 8002f58:	2d00      	cmp	r5, #0
 8002f5a:	4606      	mov	r6, r0
 8002f5c:	db01      	blt.n	8002f62 <_malloc_r+0x1a>
 8002f5e:	42a9      	cmp	r1, r5
 8002f60:	d903      	bls.n	8002f6a <_malloc_r+0x22>
 8002f62:	230c      	movs	r3, #12
 8002f64:	6033      	str	r3, [r6, #0]
 8002f66:	2000      	movs	r0, #0
 8002f68:	bd70      	pop	{r4, r5, r6, pc}
 8002f6a:	f000 f87d 	bl	8003068 <__malloc_lock>
 8002f6e:	4a21      	ldr	r2, [pc, #132]	; (8002ff4 <_malloc_r+0xac>)
 8002f70:	6814      	ldr	r4, [r2, #0]
 8002f72:	4621      	mov	r1, r4
 8002f74:	b991      	cbnz	r1, 8002f9c <_malloc_r+0x54>
 8002f76:	4c20      	ldr	r4, [pc, #128]	; (8002ff8 <_malloc_r+0xb0>)
 8002f78:	6823      	ldr	r3, [r4, #0]
 8002f7a:	b91b      	cbnz	r3, 8002f84 <_malloc_r+0x3c>
 8002f7c:	4630      	mov	r0, r6
 8002f7e:	f000 f863 	bl	8003048 <_sbrk_r>
 8002f82:	6020      	str	r0, [r4, #0]
 8002f84:	4629      	mov	r1, r5
 8002f86:	4630      	mov	r0, r6
 8002f88:	f000 f85e 	bl	8003048 <_sbrk_r>
 8002f8c:	1c43      	adds	r3, r0, #1
 8002f8e:	d124      	bne.n	8002fda <_malloc_r+0x92>
 8002f90:	230c      	movs	r3, #12
 8002f92:	4630      	mov	r0, r6
 8002f94:	6033      	str	r3, [r6, #0]
 8002f96:	f000 f868 	bl	800306a <__malloc_unlock>
 8002f9a:	e7e4      	b.n	8002f66 <_malloc_r+0x1e>
 8002f9c:	680b      	ldr	r3, [r1, #0]
 8002f9e:	1b5b      	subs	r3, r3, r5
 8002fa0:	d418      	bmi.n	8002fd4 <_malloc_r+0x8c>
 8002fa2:	2b0b      	cmp	r3, #11
 8002fa4:	d90f      	bls.n	8002fc6 <_malloc_r+0x7e>
 8002fa6:	600b      	str	r3, [r1, #0]
 8002fa8:	18cc      	adds	r4, r1, r3
 8002faa:	50cd      	str	r5, [r1, r3]
 8002fac:	4630      	mov	r0, r6
 8002fae:	f000 f85c 	bl	800306a <__malloc_unlock>
 8002fb2:	f104 000b 	add.w	r0, r4, #11
 8002fb6:	1d23      	adds	r3, r4, #4
 8002fb8:	f020 0007 	bic.w	r0, r0, #7
 8002fbc:	1ac3      	subs	r3, r0, r3
 8002fbe:	d0d3      	beq.n	8002f68 <_malloc_r+0x20>
 8002fc0:	425a      	negs	r2, r3
 8002fc2:	50e2      	str	r2, [r4, r3]
 8002fc4:	e7d0      	b.n	8002f68 <_malloc_r+0x20>
 8002fc6:	684b      	ldr	r3, [r1, #4]
 8002fc8:	428c      	cmp	r4, r1
 8002fca:	bf16      	itet	ne
 8002fcc:	6063      	strne	r3, [r4, #4]
 8002fce:	6013      	streq	r3, [r2, #0]
 8002fd0:	460c      	movne	r4, r1
 8002fd2:	e7eb      	b.n	8002fac <_malloc_r+0x64>
 8002fd4:	460c      	mov	r4, r1
 8002fd6:	6849      	ldr	r1, [r1, #4]
 8002fd8:	e7cc      	b.n	8002f74 <_malloc_r+0x2c>
 8002fda:	1cc4      	adds	r4, r0, #3
 8002fdc:	f024 0403 	bic.w	r4, r4, #3
 8002fe0:	42a0      	cmp	r0, r4
 8002fe2:	d005      	beq.n	8002ff0 <_malloc_r+0xa8>
 8002fe4:	1a21      	subs	r1, r4, r0
 8002fe6:	4630      	mov	r0, r6
 8002fe8:	f000 f82e 	bl	8003048 <_sbrk_r>
 8002fec:	3001      	adds	r0, #1
 8002fee:	d0cf      	beq.n	8002f90 <_malloc_r+0x48>
 8002ff0:	6025      	str	r5, [r4, #0]
 8002ff2:	e7db      	b.n	8002fac <_malloc_r+0x64>
 8002ff4:	200000c4 	.word	0x200000c4
 8002ff8:	200000c8 	.word	0x200000c8

08002ffc <_realloc_r>:
 8002ffc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ffe:	4607      	mov	r7, r0
 8003000:	4614      	mov	r4, r2
 8003002:	460e      	mov	r6, r1
 8003004:	b921      	cbnz	r1, 8003010 <_realloc_r+0x14>
 8003006:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800300a:	4611      	mov	r1, r2
 800300c:	f7ff bf9c 	b.w	8002f48 <_malloc_r>
 8003010:	b922      	cbnz	r2, 800301c <_realloc_r+0x20>
 8003012:	f7ff ff4d 	bl	8002eb0 <_free_r>
 8003016:	4625      	mov	r5, r4
 8003018:	4628      	mov	r0, r5
 800301a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800301c:	f000 f826 	bl	800306c <_malloc_usable_size_r>
 8003020:	42a0      	cmp	r0, r4
 8003022:	d20f      	bcs.n	8003044 <_realloc_r+0x48>
 8003024:	4621      	mov	r1, r4
 8003026:	4638      	mov	r0, r7
 8003028:	f7ff ff8e 	bl	8002f48 <_malloc_r>
 800302c:	4605      	mov	r5, r0
 800302e:	2800      	cmp	r0, #0
 8003030:	d0f2      	beq.n	8003018 <_realloc_r+0x1c>
 8003032:	4631      	mov	r1, r6
 8003034:	4622      	mov	r2, r4
 8003036:	f7ff ff17 	bl	8002e68 <memcpy>
 800303a:	4631      	mov	r1, r6
 800303c:	4638      	mov	r0, r7
 800303e:	f7ff ff37 	bl	8002eb0 <_free_r>
 8003042:	e7e9      	b.n	8003018 <_realloc_r+0x1c>
 8003044:	4635      	mov	r5, r6
 8003046:	e7e7      	b.n	8003018 <_realloc_r+0x1c>

08003048 <_sbrk_r>:
 8003048:	b538      	push	{r3, r4, r5, lr}
 800304a:	2300      	movs	r3, #0
 800304c:	4c05      	ldr	r4, [pc, #20]	; (8003064 <_sbrk_r+0x1c>)
 800304e:	4605      	mov	r5, r0
 8003050:	4608      	mov	r0, r1
 8003052:	6023      	str	r3, [r4, #0]
 8003054:	f7fd fe98 	bl	8000d88 <_sbrk>
 8003058:	1c43      	adds	r3, r0, #1
 800305a:	d102      	bne.n	8003062 <_sbrk_r+0x1a>
 800305c:	6823      	ldr	r3, [r4, #0]
 800305e:	b103      	cbz	r3, 8003062 <_sbrk_r+0x1a>
 8003060:	602b      	str	r3, [r5, #0]
 8003062:	bd38      	pop	{r3, r4, r5, pc}
 8003064:	20000194 	.word	0x20000194

08003068 <__malloc_lock>:
 8003068:	4770      	bx	lr

0800306a <__malloc_unlock>:
 800306a:	4770      	bx	lr

0800306c <_malloc_usable_size_r>:
 800306c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003070:	1f18      	subs	r0, r3, #4
 8003072:	2b00      	cmp	r3, #0
 8003074:	bfbc      	itt	lt
 8003076:	580b      	ldrlt	r3, [r1, r0]
 8003078:	18c0      	addlt	r0, r0, r3
 800307a:	4770      	bx	lr

0800307c <_init>:
 800307c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800307e:	bf00      	nop
 8003080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003082:	bc08      	pop	{r3}
 8003084:	469e      	mov	lr, r3
 8003086:	4770      	bx	lr

08003088 <_fini>:
 8003088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800308a:	bf00      	nop
 800308c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800308e:	bc08      	pop	{r3}
 8003090:	469e      	mov	lr, r3
 8003092:	4770      	bx	lr
